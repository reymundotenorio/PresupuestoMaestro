package Main;


import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Element;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
import javax.swing.table.DefaultTableModel;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;



/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Reymundo
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        TabbedPane = new org.edisoncor.gui.tabbedPane.TabbedPaneHeader();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtpu = new javax.swing.JTextField();
        Panel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtterri = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        rd3 = new javax.swing.JRadioButton();
        rd6 = new javax.swing.JRadioButton();
        rd12 = new javax.swing.JRadioButton();
        btnaceptar = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        btncalcular = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        jPanel34 = new javax.swing.JPanel();
        jPanel41 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel35 = new javax.swing.JLabel();
        jPanel42 = new javax.swing.JPanel();
        btncalcular4 = new javax.swing.JButton();
        jPanel44 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        txtPPU = new javax.swing.JTextField();
        jPanel21 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        txtCantMD = new javax.swing.JTextField();
        jPanel19 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtPorcProd = new javax.swing.JTextField();
        jPanel22 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        txtProdSig = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        btnCalcular3 = new javax.swing.JButton();
        jPanel18 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jPanel24 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        jPanel26 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        jPanel30 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        jLabel16 = new javax.swing.JLabel();
        jPanel31 = new javax.swing.JPanel();
        btncalcular2 = new javax.swing.JButton();
        jPanel32 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTable7 = new javax.swing.JTable();
        jLabel17 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel37 = new javax.swing.JPanel();
        jPanel35 = new javax.swing.JPanel();
        jPanel36 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        txtMOD = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        txtISN = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        txtMant = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        txtCalef = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        txtEnergi = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        txtVarios = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jPanel38 = new javax.swing.JPanel();
        jPanel39 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        txtDepre = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        txtImpuFija = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        txtSeguros = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        txtMIFijos = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        txtMODFija = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        txtSupervisionFijo = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        txtMantFijo = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        txtLuzFijo = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        txtenergFija = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        jPanel40 = new javax.swing.JPanel();
        jLabel33 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTable8 = new javax.swing.JTable();
        jPanel11 = new javax.swing.JPanel();
        btncalcular1 = new javax.swing.JButton();
        jPanel43 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTable9 = new javax.swing.JTable();
        jLabel34 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel27 = new javax.swing.JPanel();
        jPanel49 = new javax.swing.JPanel();
        jLabel38 = new javax.swing.JLabel();
        txtIIAT = new javax.swing.JTextField();
        jPanel47 = new javax.swing.JPanel();
        btncalcular5 = new javax.swing.JButton();
        jPanel45 = new javax.swing.JPanel();
        jPanel46 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTable10 = new javax.swing.JTable();
        jLabel36 = new javax.swing.JLabel();
        jPanel48 = new javax.swing.JPanel();
        jPanel28 = new javax.swing.JPanel();
        jPanel50 = new javax.swing.JPanel();
        jLabel44 = new javax.swing.JLabel();
        jPanel51 = new javax.swing.JPanel();
        jLabel42 = new javax.swing.JLabel();
        txtSalariosV = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        txtComisiones = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        txtViajes = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        txtPublicidad = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        txtCuentasInco = new javax.swing.JTextField();
        jPanel56 = new javax.swing.JPanel();
        btncalcular3 = new javax.swing.JButton();
        jPanel57 = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        jTable11 = new javax.swing.JTable();
        jPanel52 = new javax.swing.JPanel();
        jPanel54 = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTable12 = new javax.swing.JTable();
        jLabel43 = new javax.swing.JLabel();
        jPanel58 = new javax.swing.JPanel();
        btncalcular6 = new javax.swing.JButton();
        jPanel59 = new javax.swing.JPanel();
        jPanel55 = new javax.swing.JPanel();
        jLabel47 = new javax.swing.JLabel();
        txtIR = new javax.swing.JTextField();
        jPanel62 = new javax.swing.JPanel();
        btncalcular7 = new javax.swing.JButton();
        jPanel61 = new javax.swing.JPanel();
        jScrollPane14 = new javax.swing.JScrollPane();
        jTable13 = new javax.swing.JTable();
        jLabel45 = new javax.swing.JLabel();
        jPanel60 = new javax.swing.JPanel();
        jPanel63 = new javax.swing.JPanel();
        jLabel48 = new javax.swing.JLabel();
        txtSaldoI = new javax.swing.JTextField();
        jPanel64 = new javax.swing.JPanel();
        btncalcular8 = new javax.swing.JButton();
        jPanel65 = new javax.swing.JPanel();
        jScrollPane15 = new javax.swing.JScrollPane();
        jTable14 = new javax.swing.JTable();
        jLabel46 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Presupuesto Maestro");
        setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel6.setLayout(new java.awt.GridLayout(1, 2));

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("Precio de Venta Promedio:");
        jPanel6.add(jLabel3);

        txtpu.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtpuKeyTyped(evt);
            }
        });
        jPanel6.add(txtpu);

        jPanel4.add(jPanel6);

        Panel1.setLayout(new java.awt.GridLayout(2, 0));

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Cantidad de Territorios: ");
        jPanel2.add(jLabel1);

        txtterri.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtterriKeyTyped(evt);
            }
        });
        jPanel2.add(txtterri);

        Panel1.add(jPanel2);

        jPanel3.setLayout(new java.awt.GridLayout(1, 0));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("Periodo:");
        jPanel3.add(jLabel2);

        buttonGroup1.add(rd3);
        rd3.setSelected(true);
        rd3.setText("3 Meses");
        rd3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rd3ItemStateChanged(evt);
            }
        });
        jPanel3.add(rd3);

        buttonGroup1.add(rd6);
        rd6.setText("6 Meses");
        rd6.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rd6ItemStateChanged(evt);
            }
        });
        jPanel3.add(rd6);

        buttonGroup1.add(rd12);
        rd12.setText("12 Meses");
        rd12.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rd12ItemStateChanged(evt);
            }
        });
        jPanel3.add(rd12);

        btnaceptar.setText("Aceptar");
        btnaceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnaceptarActionPerformed(evt);
            }
        });
        jPanel3.add(btnaceptar);

        Panel1.add(jPanel3);

        jPanel4.add(Panel1);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable1);

        jPanel5.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jLabel6.setText("En Unidades:");
        jPanel5.add(jLabel6, java.awt.BorderLayout.PAGE_START);

        btncalcular.setText("Calcular");
        btncalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncalcularActionPerformed(evt);
            }
        });
        jPanel8.add(btncalcular);

        jPanel5.add(jPanel8, java.awt.BorderLayout.PAGE_END);

        jPanel4.add(jPanel5);

        jPanel7.setLayout(new java.awt.BorderLayout());

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(jTable2);

        jPanel7.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jLabel4.setText("En Dinero:");
        jPanel7.add(jLabel4, java.awt.BorderLayout.PAGE_START);

        jPanel4.add(jPanel7);

        TabbedPane.addTab("P. Ventas", jPanel4);

        jPanel15.setLayout(new javax.swing.BoxLayout(jPanel15, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel34.setLayout(new java.awt.GridLayout(1, 2));
        jPanel15.add(jPanel34);

        jPanel41.setLayout(new java.awt.BorderLayout());

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable3.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(jTable3);

        jPanel41.add(jScrollPane4, java.awt.BorderLayout.CENTER);
        jPanel41.add(jLabel35, java.awt.BorderLayout.PAGE_START);

        btncalcular4.setText("Calcular");
        btncalcular4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncalcular4ActionPerformed(evt);
            }
        });
        jPanel42.add(btncalcular4);

        jPanel41.add(jPanel42, java.awt.BorderLayout.PAGE_END);

        jPanel15.add(jPanel41);

        jPanel44.setLayout(new java.awt.BorderLayout());
        jPanel15.add(jPanel44);

        TabbedPane.addTab("P. Producción", jPanel15);

        jPanel12.setLayout(new javax.swing.BoxLayout(jPanel12, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel20.setLayout(new java.awt.GridLayout(1, 0));

        jLabel7.setText("Precio Por Unidad");
        jPanel20.add(jLabel7);

        txtPPU.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPPUKeyTyped(evt);
            }
        });
        jPanel20.add(txtPPU);

        jPanel12.add(jPanel20);

        jPanel21.setLayout(new java.awt.GridLayout(1, 0));

        jLabel8.setText("Cantidad Requerida de MD para Producir Una Unidad Terminada");
        jPanel21.add(jLabel8);

        txtCantMD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCantMDKeyTyped(evt);
            }
        });
        jPanel21.add(txtCantMD);

        jPanel12.add(jPanel21);

        jPanel19.setLayout(new java.awt.GridLayout(1, 0));

        jLabel5.setText("Porcentaje de la produccíon del Mes Siguiente Para El IF Deseado de MD");
        jPanel19.add(jLabel5);

        txtPorcProd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPorcProdKeyTyped(evt);
            }
        });
        jPanel19.add(txtPorcProd);

        jPanel12.add(jPanel19);

        jPanel22.setLayout(new java.awt.GridLayout(1, 0));

        jLabel11.setText("Producción del Mes Siguiente del Periodo (Unidades)");
        jPanel22.add(jLabel11);

        txtProdSig.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtProdSigKeyTyped(evt);
            }
        });
        jPanel22.add(txtProdSig);

        jPanel12.add(jPanel22);

        jPanel16.setLayout(new java.awt.BorderLayout());

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable4.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(jTable4);

        jPanel16.add(jScrollPane5, java.awt.BorderLayout.CENTER);
        jPanel16.add(jLabel10, java.awt.BorderLayout.PAGE_START);

        btnCalcular3.setText("Calcular");
        btnCalcular3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcular3ActionPerformed(evt);
            }
        });
        jPanel17.add(btnCalcular3);

        jPanel16.add(jPanel17, java.awt.BorderLayout.PAGE_END);

        jPanel12.add(jPanel16);

        jPanel18.setLayout(new java.awt.BorderLayout());
        jPanel12.add(jPanel18);

        TabbedPane.addTab("P. Compras MD", jPanel12);

        jPanel14.setLayout(new javax.swing.BoxLayout(jPanel14, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel23.setLayout(new java.awt.GridLayout(1, 2));
        jPanel14.add(jPanel23);

        jPanel24.setLayout(new java.awt.BorderLayout());

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable5.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(jTable5);

        jPanel24.add(jScrollPane6, java.awt.BorderLayout.CENTER);
        jPanel24.add(jLabel12, java.awt.BorderLayout.PAGE_START);

        jPanel14.add(jPanel24);

        jPanel26.setLayout(new java.awt.BorderLayout());
        jPanel14.add(jPanel26);

        TabbedPane.addTab("P. Consumo MD", jPanel14);

        jPanel25.setLayout(new javax.swing.BoxLayout(jPanel25, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel30.setLayout(new java.awt.BorderLayout());

        jTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable6.getTableHeader().setReorderingAllowed(false);
        jScrollPane7.setViewportView(jTable6);

        jPanel30.add(jScrollPane7, java.awt.BorderLayout.CENTER);

        jLabel16.setText("Horas Estimadas de Mano de Obra Directa:");
        jPanel30.add(jLabel16, java.awt.BorderLayout.PAGE_START);

        btncalcular2.setText("Calcular");
        btncalcular2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncalcular2ActionPerformed(evt);
            }
        });
        jPanel31.add(btncalcular2);

        jPanel30.add(jPanel31, java.awt.BorderLayout.PAGE_END);

        jPanel25.add(jPanel30);

        jPanel32.setLayout(new java.awt.BorderLayout());

        jTable7.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable7.getTableHeader().setReorderingAllowed(false);
        jScrollPane8.setViewportView(jTable7);

        jPanel32.add(jScrollPane8, java.awt.BorderLayout.CENTER);

        jLabel17.setText("Presupuesto de Mano de Obra Directa:");
        jPanel32.add(jLabel17, java.awt.BorderLayout.PAGE_START);

        jPanel25.add(jPanel32);

        TabbedPane.addTab("P. MOD", jPanel25);

        jPanel9.setLayout(new javax.swing.BoxLayout(jPanel9, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel10.setLayout(new java.awt.GridLayout(1, 2));
        jPanel9.add(jPanel10);

        jPanel13.setLayout(new javax.swing.BoxLayout(jPanel13, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel37.setLayout(new java.awt.BorderLayout());

        jPanel35.setLayout(new java.awt.BorderLayout());

        jPanel36.setLayout(new java.awt.GridLayout(6, 0));

        jLabel14.setText("Mano de Obra Indirecta");
        jPanel36.add(jLabel14);

        txtMOD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMODKeyTyped(evt);
            }
        });
        jPanel36.add(txtMOD);

        jLabel18.setText("Impuestos Sobre La Nómina");
        jPanel36.add(jLabel18);

        txtISN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtISNKeyTyped(evt);
            }
        });
        jPanel36.add(txtISN);

        jLabel19.setText("Mantenimiento");
        jPanel36.add(jLabel19);

        txtMant.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMantKeyTyped(evt);
            }
        });
        jPanel36.add(txtMant);

        jLabel20.setText("Calefacción y Luz");
        jPanel36.add(jLabel20);

        txtCalef.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCalefKeyTyped(evt);
            }
        });
        jPanel36.add(txtCalef);

        jLabel21.setText("Energía");
        jPanel36.add(jLabel21);

        txtEnergi.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEnergiKeyTyped(evt);
            }
        });
        jPanel36.add(txtEnergi);

        jLabel22.setText("Varíos");
        jPanel36.add(jLabel22);

        txtVarios.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtVariosKeyTyped(evt);
            }
        });
        jPanel36.add(txtVarios);

        jPanel35.add(jPanel36, java.awt.BorderLayout.CENTER);

        jLabel31.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel31.setText("Tasas de Aplicación de CIF Variables x Hr. de MOD:");
        jPanel35.add(jLabel31, java.awt.BorderLayout.PAGE_START);

        jPanel37.add(jPanel35, java.awt.BorderLayout.LINE_START);

        jPanel38.setLayout(new java.awt.BorderLayout());

        jPanel39.setLayout(new java.awt.GridLayout(5, 4, 5, 0));

        jLabel15.setText("Depreciación");
        jPanel39.add(jLabel15);

        txtDepre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDepreKeyTyped(evt);
            }
        });
        jPanel39.add(txtDepre);

        jLabel23.setText("Impuestos");
        jPanel39.add(jLabel23);

        txtImpuFija.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtImpuFijaKeyTyped(evt);
            }
        });
        jPanel39.add(txtImpuFija);

        jLabel24.setText("Seguros");
        jPanel39.add(jLabel24);

        txtSeguros.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSegurosKeyTyped(evt);
            }
        });
        jPanel39.add(txtSeguros);

        jLabel25.setText("Materiales Indirectos");
        jPanel39.add(jLabel25);

        txtMIFijos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMIFijosKeyTyped(evt);
            }
        });
        jPanel39.add(txtMIFijos);

        jLabel26.setText("Mano de Obra Indirecta");
        jPanel39.add(jLabel26);

        txtMODFija.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMODFijaActionPerformed(evt);
            }
        });
        txtMODFija.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMODFijaKeyTyped(evt);
            }
        });
        jPanel39.add(txtMODFija);

        jLabel27.setText("Supervisión");
        jPanel39.add(jLabel27);

        txtSupervisionFijo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSupervisionFijoKeyTyped(evt);
            }
        });
        jPanel39.add(txtSupervisionFijo);

        jLabel28.setText("Mantenimiento");
        jPanel39.add(jLabel28);

        txtMantFijo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMantFijoKeyTyped(evt);
            }
        });
        jPanel39.add(txtMantFijo);

        jLabel29.setText("Calefacción y Luz");
        jPanel39.add(jLabel29);

        txtLuzFijo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtLuzFijoKeyTyped(evt);
            }
        });
        jPanel39.add(txtLuzFijo);

        jLabel30.setText("Energía");
        jPanel39.add(jLabel30);

        txtenergFija.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtenergFijaKeyTyped(evt);
            }
        });
        jPanel39.add(txtenergFija);

        jPanel38.add(jPanel39, java.awt.BorderLayout.CENTER);

        jLabel32.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel32.setText("Costos y Gastos Fijos:");
        jPanel38.add(jLabel32, java.awt.BorderLayout.PAGE_START);

        jPanel37.add(jPanel38, java.awt.BorderLayout.LINE_END);

        jPanel13.add(jPanel37);

        jPanel40.setPreferredSize(new java.awt.Dimension(452, 100));
        jPanel40.setLayout(new java.awt.BorderLayout());

        jLabel33.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel33.setText("Horas de Mano de Obra Directa:");
        jPanel40.add(jLabel33, java.awt.BorderLayout.PAGE_START);

        jTable8.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable8.getTableHeader().setReorderingAllowed(false);
        jScrollPane9.setViewportView(jTable8);

        jPanel40.add(jScrollPane9, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel40);

        btncalcular1.setText("Calcular");
        btncalcular1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncalcular1ActionPerformed(evt);
            }
        });
        jPanel11.add(btncalcular1);

        jPanel13.add(jPanel11);

        jPanel43.setLayout(new java.awt.BorderLayout());

        jTable9.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable9.getTableHeader().setReorderingAllowed(false);
        jScrollPane10.setViewportView(jTable9);

        jPanel43.add(jScrollPane10, java.awt.BorderLayout.CENTER);

        jLabel34.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel34.setText("Presupuesto de CIF");
        jPanel43.add(jLabel34, java.awt.BorderLayout.PAGE_START);

        jPanel13.add(jPanel43);
        jPanel13.add(jLabel9);

        jPanel9.add(jPanel13);

        TabbedPane.addTab("P. CIF", jPanel9);

        jPanel27.setLayout(new javax.swing.BoxLayout(jPanel27, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel49.setLayout(new java.awt.GridLayout(1, 2));

        jLabel38.setText("Inventario Inicial de Articulos Terminados (1er Mes)");
        jPanel49.add(jLabel38);

        txtIIAT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIIATKeyTyped(evt);
            }
        });
        jPanel49.add(txtIIAT);

        jPanel27.add(jPanel49);

        btncalcular5.setText("Calcular");
        btncalcular5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncalcular5ActionPerformed(evt);
            }
        });
        jPanel47.add(btncalcular5);

        jPanel27.add(jPanel47);

        jPanel45.setLayout(new java.awt.GridLayout(1, 2));
        jPanel27.add(jPanel45);

        jPanel46.setLayout(new java.awt.BorderLayout());

        jTable10.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable10.getTableHeader().setReorderingAllowed(false);
        jScrollPane11.setViewportView(jTable10);

        jPanel46.add(jScrollPane11, java.awt.BorderLayout.CENTER);
        jPanel46.add(jLabel36, java.awt.BorderLayout.PAGE_START);

        jPanel27.add(jPanel46);

        jPanel48.setLayout(new java.awt.BorderLayout());
        jPanel27.add(jPanel48);

        TabbedPane.addTab("P. C. Art. V.", jPanel27);

        jPanel28.setLayout(new javax.swing.BoxLayout(jPanel28, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel50.setLayout(new java.awt.GridLayout(1, 0));

        jLabel44.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel44.setText("Gastos de Ventas Variables Como Un Porcentaje del Total de Ventas En Dinero:");
        jPanel50.add(jLabel44);

        jPanel28.add(jPanel50);

        jPanel51.setLayout(new java.awt.GridLayout(5, 0));

        jLabel42.setText("Salarios");
        jPanel51.add(jLabel42);

        txtSalariosV.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSalariosVKeyTyped(evt);
            }
        });
        jPanel51.add(txtSalariosV);

        jLabel37.setText("Comisiones");
        jPanel51.add(jLabel37);

        txtComisiones.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtComisionesKeyTyped(evt);
            }
        });
        jPanel51.add(txtComisiones);

        jLabel39.setText("Viajes");
        jPanel51.add(jLabel39);

        txtViajes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtViajesKeyTyped(evt);
            }
        });
        jPanel51.add(txtViajes);

        jLabel40.setText("Publicidad");
        jPanel51.add(jLabel40);

        txtPublicidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPublicidadKeyTyped(evt);
            }
        });
        jPanel51.add(txtPublicidad);

        jLabel41.setText("Cuentas Incobrables");
        jPanel51.add(jLabel41);

        txtCuentasInco.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCuentasIncoKeyTyped(evt);
            }
        });
        jPanel51.add(txtCuentasInco);

        jPanel28.add(jPanel51);

        btncalcular3.setText("Calcular");
        btncalcular3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncalcular3ActionPerformed(evt);
            }
        });
        jPanel56.add(btncalcular3);

        jPanel28.add(jPanel56);

        jPanel57.setLayout(new java.awt.BorderLayout());

        jTable11.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable11.getTableHeader().setReorderingAllowed(false);
        jScrollPane13.setViewportView(jTable11);

        jPanel57.add(jScrollPane13, java.awt.BorderLayout.CENTER);

        jPanel28.add(jPanel57);

        TabbedPane.addTab("P. Gtos. V", jPanel28);

        jPanel52.setLayout(new javax.swing.BoxLayout(jPanel52, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel54.setLayout(new java.awt.BorderLayout());

        jTable12.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable12.getTableHeader().setReorderingAllowed(false);
        jScrollPane12.setViewportView(jTable12);

        jPanel54.add(jScrollPane12, java.awt.BorderLayout.CENTER);
        jPanel54.add(jLabel43, java.awt.BorderLayout.PAGE_START);

        jPanel52.add(jPanel54);

        btncalcular6.setText("Calcular");
        btncalcular6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncalcular6ActionPerformed(evt);
            }
        });
        jPanel58.add(btncalcular6);

        jPanel52.add(jPanel58);

        TabbedPane.addTab("P. Gtos. A", jPanel52);

        jPanel59.setLayout(new javax.swing.BoxLayout(jPanel59, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel55.setLayout(new java.awt.GridLayout(1, 2));

        jLabel47.setText("Impuesto Sobre La Renta (%)");
        jPanel55.add(jLabel47);

        txtIR.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIRKeyTyped(evt);
            }
        });
        jPanel55.add(txtIR);

        jPanel59.add(jPanel55);

        btncalcular7.setText("Calcular");
        btncalcular7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncalcular7ActionPerformed(evt);
            }
        });
        jPanel62.add(btncalcular7);

        jPanel59.add(jPanel62);

        jPanel61.setLayout(new java.awt.BorderLayout());

        jTable13.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable13.getTableHeader().setReorderingAllowed(false);
        jScrollPane14.setViewportView(jTable13);

        jPanel61.add(jScrollPane14, java.awt.BorderLayout.CENTER);
        jPanel61.add(jLabel45, java.awt.BorderLayout.PAGE_START);

        jPanel59.add(jPanel61);

        TabbedPane.addTab("Estado I. P.", jPanel59);

        jPanel60.setLayout(new javax.swing.BoxLayout(jPanel60, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel63.setLayout(new java.awt.GridLayout(1, 2));

        jLabel48.setText("Saldo Inicial de Caja");
        jPanel63.add(jLabel48);

        txtSaldoI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSaldoIKeyTyped(evt);
            }
        });
        jPanel63.add(txtSaldoI);

        jPanel60.add(jPanel63);

        btncalcular8.setText("Calcular");
        btncalcular8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncalcular8ActionPerformed(evt);
            }
        });
        jPanel64.add(btncalcular8);

        jPanel60.add(jPanel64);

        jPanel65.setLayout(new java.awt.BorderLayout());

        jTable14.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable14.getTableHeader().setReorderingAllowed(false);
        jScrollPane15.setViewportView(jTable14);

        jPanel65.add(jScrollPane15, java.awt.BorderLayout.CENTER);
        jPanel65.add(jLabel46, java.awt.BorderLayout.PAGE_START);

        jPanel60.add(jPanel65);

        TabbedPane.addTab("P. Caja", jPanel60);

        jPanel1.add(TabbedPane, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(1325, 433));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
//DefaultTableModel model = new DefaultTableModel();

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

//rd3.setSelected(true);
        
model.setColumnCount(3); 
String header [] = {"Territorio","Mes #1","Mes #2","Mes #3","TOTAL"};
model.setColumnIdentifiers(header);
jTable1.setModel(model);
//model2.setColumnCount(5); 
model2.setColumnIdentifiers(header);
jTable2.setModel(model2);

String header1 [] = {"Unidades","Mes #1","Mes #2","Mes #3","TOTAL"};
model3.setRowCount(5); 
model3.setColumnIdentifiers(header1);

model3.setValueAt("Presupuesto de Ventas", 0, 0);
model3.setValueAt("Más: Inventario Final Deseado", 1, 0);
model3.setValueAt("     Subtotal", 2, 0);
model3.setValueAt("Menos: Inventario Inicial", 3, 0);
model3.setValueAt("Unidades de Producción Requeridas", 4, 0);
jTable3.setModel(model3);

String header2 [] = {"Producción Requerida","Mes #1","Mes #2","Mes #3","TOTAL"};
model4.setRowCount(8); 
model4.setColumnIdentifiers(header2);

model4.setValueAt("Unidades", 0, 0);
model4.setValueAt("Unidades de MD Requerido", 1, 0);
model4.setValueAt("Más: Inventario Final Deseado", 2, 0);
model4.setValueAt("     Subtotal", 3, 0);
model4.setValueAt("Menos: Inventario Inicial", 4, 0);
model4.setValueAt("     Compras Requeridas", 5, 0);
model4.setValueAt("Precio Por Unidad", 6, 0);
model4.setValueAt("Costo de Compra", 7, 0);

jTable4.setModel(model4);


String header3 [] = {"","Mes #1","Mes #2","Mes #3","TOTAL"};
model5.setRowCount(3); 
model5.setColumnIdentifiers(header3);

model5.setValueAt("Unidades Requeridas", 0, 0);
model5.setValueAt("Costo Unitario", 1, 0);
model5.setValueAt("     Costo de Consumo", 2, 0);

jTable5.setModel(model5);

String header4 [] = {" ","Horas Por Unidad","Costo Por Hora"};
model6.setRowCount(3); 
model6.setColumnIdentifiers(header4);

for(int i=0;i<3;i++){
  model6.setValueAt("Mes #"+(i+1), i, 0);
}


jTable6.setModel(model6);


String header5 [] = {" ","Mes #1","Mes #2","Mes #3","TOTAL"};
model7.setRowCount(4); 
model7.setColumnIdentifiers(header5);

model7.setValueAt("Unidades Requeridas", 0, 0);
model7.setValueAt("Horas de Mano de Obra Directa", 1, 0);
model7.setValueAt("Tasa Por Hora de Mano de Obra Directa", 2, 0);
model7.setValueAt("Costo de La Mano de Obra Directa", 3, 0);


jTable7.setModel(model7);

String header6 [] = {" ","Mes #1","Mes #2","Mes #3"};
model8.setRowCount(1); 
model8.setColumnIdentifiers(header6);
model8.setValueAt("Hrs de MOD", 0, 0);

jTable8.setModel(model8);

String header8 [] = {"Presupuestos de Apoyo","Mes #1","Mes #2","Mes #3","TOTAL"};
model10.setRowCount(8); 
model10.setColumnIdentifiers(header8);
model10.setValueAt("Presupuesto de Consumo MD", 0, 0);
model10.setValueAt("Presupuesto de MOD", 1, 0);
model10.setValueAt("Presupuesto de CIF", 2, 0);
model10.setValueAt("     Costos Totales de Manufactura", 3, 0);
model10.setValueAt("Más: I.I. Arts. Terminados", 4, 0);
model10.setValueAt("     Articulos Disponibles", 5, 0);
model10.setValueAt("Menos: I.F. Arts. Terminados", 6, 0);
model10.setValueAt("     Costo Arts. Vendidos", 7, 0);

jTable10.setModel(model10);


String header10 [] = {"Tipo de Gasto","TOTAL"};
model12.setRowCount(5); 
model12.setColumnIdentifiers(header10);
model12.setValueAt("Salarios de Los Ejecutivos", 0, 0);
model12.setValueAt("Salarios de Oficina", 1, 0);
model12.setValueAt("Seguros", 2, 0);
model12.setValueAt("Impuestos", 3, 0);
model12.setValueAt("    Total de Gastos Administrativos", 4, 0);


jTable12.setModel(model12);


String header11 [] = {"Presupuesto de Apoyo","Mes #1","Mes #2","Mes #3","TOTAL"};
model13.setRowCount(10); 
model13.setColumnIdentifiers(header11);
model13.setValueAt("Ventas", 0, 0);
model13.setValueAt("Costo de los Articulos Vendidos", 1, 0);
model13.setValueAt("    Utilidad Bruta", 2, 0);
model13.setValueAt("Gastos Operacionales:", 3, 0);
model13.setValueAt("    Gastos de Ventas", 4, 0);
model13.setValueAt("    Gastos Administrativos", 5, 0);
model13.setValueAt("        Total de Gastos Operacionales", 6, 0);
model13.setValueAt("            Utilidad Neta Antes de Impuestos", 7, 0);
model13.setValueAt("Impuestos Sobre La Renta", 8, 0);
model13.setValueAt("    Utilidad Neta", 9, 0);


jTable13.setModel(model13);

String header12 [] = {" ","Mes #1","Mes #2","Mes #3","TOTAL"};
model14.setRowCount(13); 
model14.setColumnIdentifiers(header12);
model14.setValueAt("Saldo Inicial de Caja", 0, 0);
model14.setValueAt("Entradas de Caja:", 1, 0);
model14.setValueAt("    Ventas de Contado", 2, 0);
model14.setValueAt("        Total Disponible en Caja", 3, 0);
model14.setValueAt("Salidas de Caja:", 4, 0);
model14.setValueAt("    Materiales Directos", 5, 0);
model14.setValueAt("    Mano de Obra Directa", 6, 0);
model14.setValueAt("    Costos Indirectos de Fabricación", 7, 0);
model14.setValueAt("    Gastos de Venta", 8, 0);
model14.setValueAt("    Gastos Administrativos", 9, 0);
model14.setValueAt("    Impuestos Sobre La Renta", 10, 0);
model14.setValueAt("        Total de Desembolso de Caja", 11, 0);
model14.setValueAt("            Superávit o Deficit", 12, 0);


jTable14.setModel(model14);


// TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    
  private  int columna;
  private int fila;
    private void btnaceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnaceptarActionPerformed
 String terri="";
 String pvu="";
 terri = txtterri.getText().trim();
 pvu=txtpu.getText().trim();
 
if(!"".equals(terri)&&!"".equals(pvu)){
   
    int ter=0;
    double pv=0;
    
 pv=Double.parseDouble(pvu);
 ter= Integer.parseInt(terri);
   
 model.setRowCount(ter+1);
 model2.setRowCount(ter+1);
     
  for(int i=0;i<ter;i++){
     
      model.setValueAt("Núm. #"+(i+1), i, 0);
     model2.setValueAt("Núm. #"+(i+1), i, 0);
      
      
      
  }
    
    model.setValueAt("TOTAL", ter, 0);
     model2.setValueAt("TOTAL", ter, 0);
     
     fila=ter;
      
  
              if(rd3.isSelected()){
              model.setColumnCount(3+1); 
              String header [] = {"Territorio","Mes #1","Mes #2","Mes #3","TOTAL"};
              model.setColumnIdentifiers(header);
              //model2.setColumnCount(3+1); 
              model2.setColumnIdentifiers(header);
              
              String header1 [] = {"Unidades","Mes #1","Mes #2","Mes #3","TOTAL"};
              model3.setColumnIdentifiers(header1);
              
              String header2 [] = {"Producción Requerida","Mes #1","Mes #2","Mes #3","TOTAL"};
              model4.setColumnIdentifiers(header2);
              
              String header3 [] = {"","Mes #1","Mes #2","Mes #3","TOTAL"};
              model5.setColumnIdentifiers(header3);
   
                       model6.setRowCount(3); 
              
              for(int i=0;i<3;i++){
                 model6.setValueAt("Mes #"+(i+1), i, 0);
            }
              model7.setColumnIdentifiers(header3);
             
              String header6 [] = {" ","Mes #1","Mes #2","Mes #3"};
                model8.setColumnIdentifiers(header6);

                
                
String header8 [] = {"Presupuestos de Apoyo","Mes #1","Mes #2","Mes #3","TOTAL"};
model10.setColumnIdentifiers(header8);




String header10 [] = {"Tipo de Gasto","TOTAL"};
model12.setColumnIdentifiers(header10);




String header11 [] = {"Presupuesto de Apoyo","Mes #1","Mes #2","Mes #3","TOTAL"};

model13.setColumnIdentifiers(header11);


String header12 [] = {" ","Mes #1","Mes #2","Mes #3","TOTAL"};

model14.setColumnIdentifiers(header12);




     
              
              }
              
              
                if(rd6.isSelected()){
              model.setColumnCount(6+1);
                  String header [] = {"Territorio","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","TOTAL"};
               model.setColumnIdentifiers(header);
              //  model2.setColumnCount(6+1);
               model2.setColumnIdentifiers(header);
               
               String header1 [] = {"Unidades","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","TOTAL"};
              model3.setColumnIdentifiers(header1);
              
              String header2 [] = {"Producción Requerida","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","TOTAL"};
                model4.setColumnIdentifiers(header2);
                
        String header3 [] = {"","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","TOTAL"};
             
              model5.setColumnIdentifiers(header3);
   
                  model6.setRowCount(6); 
              
              for(int i=0;i<6;i++){
                 model6.setValueAt("Mes #"+(i+1), i, 0);
            }
                model7.setColumnIdentifiers(header3);
                
                   String header6 [] = {" ","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6"};
                model8.setColumnIdentifiers(header6);


                       
                
String header8 [] = {"Presupuestos de Apoyo","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","TOTAL"};
model10.setColumnIdentifiers(header8);




String header10 [] = {"Tipo de Gasto","TOTAL"};
model12.setColumnIdentifiers(header10);




String header11 [] = {"Presupuesto de Apoyo","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","TOTAL"};

model13.setColumnIdentifiers(header11);


String header12 [] = {" ","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","TOTAL"};

model14.setColumnIdentifiers(header12);




     
          
              }
                
                
                 if(rd12.isSelected()){
              model.setColumnCount(12+1);
                  String header [] = {"Territorio","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12","TOTAL"};
               model.setColumnIdentifiers(header);
              //   model2.setColumnCount(12+1);
               model2.setColumnIdentifiers(header);
               
               String header1 [] = {"Unidades","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12","TOTAL"};
              model3.setColumnIdentifiers(header1);
                 
              String header2 [] = {"Producción Requerida","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12","TOTAL"};
                       model4.setColumnIdentifiers(header2);
                       
              String header3 [] = {"","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12","TOTAL"};
              model5.setColumnIdentifiers(header3);
  
              model6.setRowCount(12); 
              
              for(int i=0;i<12;i++){
                 model6.setValueAt("Mes #"+(i+1), i, 0);
            }
                  model7.setColumnIdentifiers(header3);       
                   
                  
                   String header6 [] = {" ","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12"};
                model8.setColumnIdentifiers(header6);
                
                
                  
String header8 [] = {"Presupuestos de Apoyo","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12","TOTAL"};
model10.setColumnIdentifiers(header8);




String header10 [] = {"Tipo de Gasto","TOTAL"};
model12.setColumnIdentifiers(header10);




String header11 [] = {"Presupuesto de Apoyo","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12","TOTAL"};

model13.setColumnIdentifiers(header11);


String header12 [] = {" ","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12","TOTAL"};

model14.setColumnIdentifiers(header12);



              }

        columna=model.getColumnCount()-1;
              jTable1.setModel(model);
              jTable2.setModel(model2);
              jTable3.setModel(model3);
              jTable4.setModel(model4);
              jTable5.setModel(model5);
              jTable6.setModel(model6);
              jTable8.setModel(model8);
              jTable10.setModel(model10);
              jTable12.setModel(model12);
              jTable13.setModel(model13);
              jTable14.setModel(model14);
                
  
         
              
 //  jTable1.setDefaultEditor(Integer.class, (TableCellEditor) new IntegerEditor());
              
} 
              
else{
    
    
    JOptionPane.showMessageDialog(this, "Introduzca El Número de Territorios y El Precio de Ventas Promedio", "Introducir Todos Los Datos", JOptionPane.ERROR_MESSAGE);
    return;
}

           // TODO add your handling code here:
    }//GEN-LAST:event_btnaceptarActionPerformed

    private void txtterriKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtterriKeyTyped
int a=0;
char c=evt.getKeyChar();
       
       String b = "";
       b =txtterri.getText().trim();
       
       if(!Character.isDigit(c)&&!Character.isISOControl(c)||b.length()>1){
           Toolkit.getDefaultToolkit().beep();
             evt.consume();
          
      } 
         
        if(Character.isDigit(c)){
           
        if(txtterri.getCaretPosition()==0){
            
         if(c=='0'){
                   
             Toolkit.getDefaultToolkit().beep();
             evt.consume();
         }
           
       }   
        
        else{
            
            
            if(txtterri.getCaretPosition()!=0){
                
                if(!Character.isISOControl(c)){
                    
                    if("0".equals(b)&&c=='0'){
                        
                         Toolkit.getDefaultToolkit().beep();
             evt.consume();
                    }
                }
                a=Integer.parseInt(b.concat(String.valueOf(c)));
                
                if(a>20){
                    Toolkit.getDefaultToolkit().beep();
             evt.consume(); 
                    
                }
            }
        }
        
           
       }
        
       
       
          // TODO add your handling code here:
    }//GEN-LAST:event_txtterriKeyTyped

    private void rd3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rd3ItemStateChanged
  String terri="";
 String pvu="";
 terri = txtterri.getText().trim();
 pvu=txtpu.getText().trim();
   int ter=0;
    double pv=0;
if(!"".equals(terri)&&!"".equals(pvu)){
   
  
    
 pv=Double.parseDouble(pvu);
 ter= Integer.parseInt(terri);
}
 model.setRowCount(ter+1);
 model2.setRowCount(ter+1);
     
  for(int i=0;i<ter;i++){
     
      model.setValueAt("Núm. #"+(i+1), i, 0);
     model2.setValueAt("Núm. #"+(i+1), i, 0);
      
      
      
  }
    
     model.setValueAt("TOTAL", ter, 0);
     model2.setValueAt("TOTAL", ter, 0);
     
     fila=ter;
  
             
              if(rd3.isSelected()){
              model.setColumnCount(3+1); 
              String header [] = {"Territorio","Mes #1","Mes #2","Mes #3","TOTAL"};
              model.setColumnIdentifiers(header);
              //model2.setColumnCount(3+1); 
              model2.setColumnIdentifiers(header);
              
              String header1 [] = {"Unidades","Mes #1","Mes #2","Mes #3","TOTAL"};
              model3.setColumnIdentifiers(header1);
              
              String header2 [] = {"Producción Requerida","Mes #1","Mes #2","Mes #3","TOTAL"};
              model4.setColumnIdentifiers(header2);
              
              String header3 [] = {"","Mes #1","Mes #2","Mes #3","TOTAL"};
              model5.setColumnIdentifiers(header3);
   
                       model6.setRowCount(3); 
              
              for(int i=0;i<3;i++){
                 model6.setValueAt("Mes #"+(i+1), i, 0);
            }
              model7.setColumnIdentifiers(header3);
             
              String header6 [] = {" ","Mes #1","Mes #2","Mes #3"};
                model8.setColumnIdentifiers(header6);

                
                
String header8 [] = {"Presupuestos de Apoyo","Mes #1","Mes #2","Mes #3","TOTAL"};
model10.setColumnIdentifiers(header8);




String header10 [] = {"Tipo de Gasto","TOTAL"};
model12.setColumnIdentifiers(header10);




String header11 [] = {"Presupuesto de Apoyo","Mes #1","Mes #2","Mes #3","TOTAL"};

model13.setColumnIdentifiers(header11);


String header12 [] = {" ","Mes #1","Mes #2","Mes #3","TOTAL"};

model14.setColumnIdentifiers(header12);




     
              
              }
              
              
                if(rd6.isSelected()){
              model.setColumnCount(6+1);
                  String header [] = {"Territorio","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","TOTAL"};
               model.setColumnIdentifiers(header);
              //  model2.setColumnCount(6+1);
               model2.setColumnIdentifiers(header);
               
               String header1 [] = {"Unidades","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","TOTAL"};
              model3.setColumnIdentifiers(header1);
              
              String header2 [] = {"Producción Requerida","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","TOTAL"};
                model4.setColumnIdentifiers(header2);
                
        String header3 [] = {"","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","TOTAL"};
             
              model5.setColumnIdentifiers(header3);
   
                  model6.setRowCount(6); 
              
              for(int i=0;i<6;i++){
                 model6.setValueAt("Mes #"+(i+1), i, 0);
            }
                model7.setColumnIdentifiers(header3);
                
                   String header6 [] = {" ","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6"};
                model8.setColumnIdentifiers(header6);


                       
                
String header8 [] = {"Presupuestos de Apoyo","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","TOTAL"};
model10.setColumnIdentifiers(header8);




String header10 [] = {"Tipo de Gasto","TOTAL"};
model12.setColumnIdentifiers(header10);




String header11 [] = {"Presupuesto de Apoyo","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","TOTAL"};

model13.setColumnIdentifiers(header11);


String header12 [] = {" ","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","TOTAL"};

model14.setColumnIdentifiers(header12);




     
          
              }
                
                
                 if(rd12.isSelected()){
              model.setColumnCount(12+1);
                  String header [] = {"Territorio","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12","TOTAL"};
               model.setColumnIdentifiers(header);
              //   model2.setColumnCount(12+1);
               model2.setColumnIdentifiers(header);
               
               String header1 [] = {"Unidades","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12","TOTAL"};
              model3.setColumnIdentifiers(header1);
                 
              String header2 [] = {"Producción Requerida","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12","TOTAL"};
                       model4.setColumnIdentifiers(header2);
                       
              String header3 [] = {"","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12","TOTAL"};
              model5.setColumnIdentifiers(header3);
  
              model6.setRowCount(12); 
              
              for(int i=0;i<12;i++){
                 model6.setValueAt("Mes #"+(i+1), i, 0);
            }
                  model7.setColumnIdentifiers(header3);       
                   
                  
                   String header6 [] = {" ","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12"};
                model8.setColumnIdentifiers(header6);
                
                
                  
String header8 [] = {"Presupuestos de Apoyo","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12","TOTAL"};
model10.setColumnIdentifiers(header8);




String header10 [] = {"Tipo de Gasto","TOTAL"};
model12.setColumnIdentifiers(header10);




String header11 [] = {"Presupuesto de Apoyo","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12","TOTAL"};

model13.setColumnIdentifiers(header11);


String header12 [] = {" ","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12","TOTAL"};

model14.setColumnIdentifiers(header12);



              }

        columna=model.getColumnCount()-1;
              jTable1.setModel(model);
              jTable2.setModel(model2);
              jTable3.setModel(model3);
              jTable4.setModel(model4);
              jTable5.setModel(model5);
              jTable6.setModel(model6);
              jTable8.setModel(model8);
              jTable10.setModel(model10);
              jTable12.setModel(model12);
              jTable13.setModel(model13);
              jTable14.setModel(model14);
  
                             
 //  jTable1.setDefaultEditor(Integer.class, (TableCellEditor) new IntegerEditor());
              
              
       
 
                      // TODO add your handling code here:
    }//GEN-LAST:event_rd3ItemStateChanged

    private void rd6ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rd6ItemStateChanged
    String terri="";
 String pvu="";
 terri = txtterri.getText().trim();
 pvu=txtpu.getText().trim();
   int ter=0;
    double pv=0;
if(!"".equals(terri)&&!"".equals(pvu)){
   
  
    
 pv=Double.parseDouble(pvu);
 ter= Integer.parseInt(terri);
}
 model.setRowCount(ter+1);
 model2.setRowCount(ter+1);
     
  for(int i=0;i<ter;i++){
     
      model.setValueAt("Núm. #"+(i+1), i, 0);
     model2.setValueAt("Núm. #"+(i+1), i, 0);
      
      
      
  }
    
    model.setValueAt("TOTAL", ter, 0);
     model2.setValueAt("TOTAL", ter, 0);
     
     fila=ter;
      
             
              if(rd3.isSelected()){
              model.setColumnCount(3+1); 
              String header [] = {"Territorio","Mes #1","Mes #2","Mes #3","TOTAL"};
              model.setColumnIdentifiers(header);
              //model2.setColumnCount(3+1); 
              model2.setColumnIdentifiers(header);
              
              String header1 [] = {"Unidades","Mes #1","Mes #2","Mes #3","TOTAL"};
              model3.setColumnIdentifiers(header1);
              
              String header2 [] = {"Producción Requerida","Mes #1","Mes #2","Mes #3","TOTAL"};
              model4.setColumnIdentifiers(header2);
              
              String header3 [] = {"","Mes #1","Mes #2","Mes #3","TOTAL"};
              model5.setColumnIdentifiers(header3);
   
                       model6.setRowCount(3); 
              
              for(int i=0;i<3;i++){
                 model6.setValueAt("Mes #"+(i+1), i, 0);
            }
              model7.setColumnIdentifiers(header3);
             
              String header6 [] = {" ","Mes #1","Mes #2","Mes #3"};
                model8.setColumnIdentifiers(header6);

                
                
String header8 [] = {"Presupuestos de Apoyo","Mes #1","Mes #2","Mes #3","TOTAL"};
model10.setColumnIdentifiers(header8);




String header10 [] = {"Tipo de Gasto","TOTAL"};
model12.setColumnIdentifiers(header10);




String header11 [] = {"Presupuesto de Apoyo","Mes #1","Mes #2","Mes #3","TOTAL"};

model13.setColumnIdentifiers(header11);


String header12 [] = {" ","Mes #1","Mes #2","Mes #3","TOTAL"};

model14.setColumnIdentifiers(header12);




     
              
              }
              
              
                if(rd6.isSelected()){
              model.setColumnCount(6+1);
                  String header [] = {"Territorio","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","TOTAL"};
               model.setColumnIdentifiers(header);
              //  model2.setColumnCount(6+1);
               model2.setColumnIdentifiers(header);
               
               String header1 [] = {"Unidades","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","TOTAL"};
              model3.setColumnIdentifiers(header1);
              
              String header2 [] = {"Producción Requerida","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","TOTAL"};
                model4.setColumnIdentifiers(header2);
                
        String header3 [] = {"","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","TOTAL"};
             
              model5.setColumnIdentifiers(header3);
   
                  model6.setRowCount(6); 
              
              for(int i=0;i<6;i++){
                 model6.setValueAt("Mes #"+(i+1), i, 0);
            }
                model7.setColumnIdentifiers(header3);
                
                   String header6 [] = {" ","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6"};
                model8.setColumnIdentifiers(header6);


                       
                
String header8 [] = {"Presupuestos de Apoyo","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","TOTAL"};
model10.setColumnIdentifiers(header8);




String header10 [] = {"Tipo de Gasto","TOTAL"};
model12.setColumnIdentifiers(header10);




String header11 [] = {"Presupuesto de Apoyo","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","TOTAL"};

model13.setColumnIdentifiers(header11);


String header12 [] = {" ","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","TOTAL"};

model14.setColumnIdentifiers(header12);




     
          
              }
                
                
                 if(rd12.isSelected()){
              model.setColumnCount(12+1);
                  String header [] = {"Territorio","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12","TOTAL"};
               model.setColumnIdentifiers(header);
              //   model2.setColumnCount(12+1);
               model2.setColumnIdentifiers(header);
               
               String header1 [] = {"Unidades","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12","TOTAL"};
              model3.setColumnIdentifiers(header1);
                 
              String header2 [] = {"Producción Requerida","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12","TOTAL"};
                       model4.setColumnIdentifiers(header2);
                       
              String header3 [] = {"","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12","TOTAL"};
              model5.setColumnIdentifiers(header3);
  
              model6.setRowCount(12); 
              
              for(int i=0;i<12;i++){
                 model6.setValueAt("Mes #"+(i+1), i, 0);
            }
                  model7.setColumnIdentifiers(header3);       
                   
                  
                   String header6 [] = {" ","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12"};
                model8.setColumnIdentifiers(header6);
                
                
                  
String header8 [] = {"Presupuestos de Apoyo","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12","TOTAL"};
model10.setColumnIdentifiers(header8);




String header10 [] = {"Tipo de Gasto","TOTAL"};
model12.setColumnIdentifiers(header10);




String header11 [] = {"Presupuesto de Apoyo","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12","TOTAL"};

model13.setColumnIdentifiers(header11);


String header12 [] = {" ","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12","TOTAL"};

model14.setColumnIdentifiers(header12);



              }

        columna=model.getColumnCount()-1;
              jTable1.setModel(model);
              jTable2.setModel(model2);
              jTable3.setModel(model3);
              jTable4.setModel(model4);
              jTable5.setModel(model5);
              jTable6.setModel(model6);
              jTable8.setModel(model8);
              jTable10.setModel(model10);
              jTable12.setModel(model12);
              jTable13.setModel(model13);
              jTable14.setModel(model14);
  
              
 //  jTable1.setDefaultEditor(Integer.class, (TableCellEditor) new IntegerEditor());
              
              
              
                      // TODO add your handling code here:
    }//GEN-LAST:event_rd6ItemStateChanged

    private void rd12ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rd12ItemStateChanged
     String terri="";
 String pvu="";
 terri = txtterri.getText().trim();
 pvu=txtpu.getText().trim();
   int ter=0;
    double pv=0;
if(!"".equals(terri)&&!"".equals(pvu)){
   
  
    
 pv=Double.parseDouble(pvu);
 ter= Integer.parseInt(terri);
}
 model.setRowCount(ter+1);
 model2.setRowCount(ter+1);
     
  for(int i=0;i<ter;i++){
     
      model.setValueAt("Núm. #"+(i+1), i, 0);
     model2.setValueAt("Núm. #"+(i+1), i, 0);
      
      
      
  }
    
    model.setValueAt("TOTAL", ter, 0);
     model2.setValueAt("TOTAL", ter, 0);
     
     fila=ter;
      
  
           
              if(rd3.isSelected()){
              model.setColumnCount(3+1); 
              String header [] = {"Territorio","Mes #1","Mes #2","Mes #3","TOTAL"};
              model.setColumnIdentifiers(header);
              //model2.setColumnCount(3+1); 
              model2.setColumnIdentifiers(header);
              
              String header1 [] = {"Unidades","Mes #1","Mes #2","Mes #3","TOTAL"};
              model3.setColumnIdentifiers(header1);
              
              String header2 [] = {"Producción Requerida","Mes #1","Mes #2","Mes #3","TOTAL"};
              model4.setColumnIdentifiers(header2);
              
              String header3 [] = {"","Mes #1","Mes #2","Mes #3","TOTAL"};
              model5.setColumnIdentifiers(header3);
   
                       model6.setRowCount(3); 
              
              for(int i=0;i<3;i++){
                 model6.setValueAt("Mes #"+(i+1), i, 0);
            }
              model7.setColumnIdentifiers(header3);
             
              String header6 [] = {" ","Mes #1","Mes #2","Mes #3"};
                model8.setColumnIdentifiers(header6);

                
                
String header8 [] = {"Presupuestos de Apoyo","Mes #1","Mes #2","Mes #3","TOTAL"};
model10.setColumnIdentifiers(header8);




String header10 [] = {"Tipo de Gasto","TOTAL"};
model12.setColumnIdentifiers(header10);




String header11 [] = {"Presupuesto de Apoyo","Mes #1","Mes #2","Mes #3","TOTAL"};

model13.setColumnIdentifiers(header11);


String header12 [] = {" ","Mes #1","Mes #2","Mes #3","TOTAL"};

model14.setColumnIdentifiers(header12);




     
              
              }
              
              
                if(rd6.isSelected()){
              model.setColumnCount(6+1);
                  String header [] = {"Territorio","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","TOTAL"};
               model.setColumnIdentifiers(header);
              //  model2.setColumnCount(6+1);
               model2.setColumnIdentifiers(header);
               
               String header1 [] = {"Unidades","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","TOTAL"};
              model3.setColumnIdentifiers(header1);
              
              String header2 [] = {"Producción Requerida","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","TOTAL"};
                model4.setColumnIdentifiers(header2);
                
        String header3 [] = {"","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","TOTAL"};
             
              model5.setColumnIdentifiers(header3);
   
                  model6.setRowCount(6); 
              
              for(int i=0;i<6;i++){
                 model6.setValueAt("Mes #"+(i+1), i, 0);
            }
                model7.setColumnIdentifiers(header3);
                
                   String header6 [] = {" ","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6"};
                model8.setColumnIdentifiers(header6);


                       
                
String header8 [] = {"Presupuestos de Apoyo","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","TOTAL"};
model10.setColumnIdentifiers(header8);




String header10 [] = {"Tipo de Gasto","TOTAL"};
model12.setColumnIdentifiers(header10);




String header11 [] = {"Presupuesto de Apoyo","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","TOTAL"};

model13.setColumnIdentifiers(header11);


String header12 [] = {" ","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","TOTAL"};

model14.setColumnIdentifiers(header12);




     
          
              }
                
                
                 if(rd12.isSelected()){
              model.setColumnCount(12+1);
                  String header [] = {"Territorio","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12","TOTAL"};
               model.setColumnIdentifiers(header);
              //   model2.setColumnCount(12+1);
               model2.setColumnIdentifiers(header);
               
               String header1 [] = {"Unidades","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12","TOTAL"};
              model3.setColumnIdentifiers(header1);
                 
              String header2 [] = {"Producción Requerida","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12","TOTAL"};
                       model4.setColumnIdentifiers(header2);
                       
              String header3 [] = {"","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12","TOTAL"};
              model5.setColumnIdentifiers(header3);
  
              model6.setRowCount(12); 
              
              for(int i=0;i<12;i++){
                 model6.setValueAt("Mes #"+(i+1), i, 0);
            }
                  model7.setColumnIdentifiers(header3);       
                   
                  
                   String header6 [] = {" ","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12"};
                model8.setColumnIdentifiers(header6);
                
                
                  
String header8 [] = {"Presupuestos de Apoyo","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12","TOTAL"};
model10.setColumnIdentifiers(header8);




String header10 [] = {"Tipo de Gasto","TOTAL"};
model12.setColumnIdentifiers(header10);




String header11 [] = {"Presupuesto de Apoyo","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12","TOTAL"};

model13.setColumnIdentifiers(header11);


String header12 [] = {" ","Mes #1","Mes #2","Mes #3","Mes #4","Mes #5","Mes #6","Mes #7","Mes #8","Mes #9","Mes #10","Mes #11","Mes #12","TOTAL"};

model14.setColumnIdentifiers(header12);



              }

        columna=model.getColumnCount()-1;
              jTable1.setModel(model);
              jTable2.setModel(model2);
              jTable3.setModel(model3);
              jTable4.setModel(model4);
              jTable5.setModel(model5);
              jTable6.setModel(model6);
              jTable8.setModel(model8);
              jTable10.setModel(model10);
              jTable12.setModel(model12);
              jTable13.setModel(model13);
              jTable14.setModel(model14);
  
 //  jTable1.setDefaultEditor(Integer.class, (TableCellEditor) new IntegerEditor());
              
              
                      // TODO add your handling code here:
    }//GEN-LAST:event_rd12ItemStateChanged

    private void btncalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncalcularActionPerformed

jTable1.updateUI();

  String terri="";
 
 terri = txtterri.getText().trim();
  int ter=0;
 
  
  
if(!"".equals(terri)){
   
 ter= Integer.parseInt(terri);
 
}

int col=0;

 if(rd3.isSelected()){
      col=3;
              }
 
 if(rd6.isSelected()){
  col=6;
 }
 
  if(rd12.isSelected()){
   col=12;
   }
long value=0;
long total1=0;
long total2=0;
long value2=0;
long pvu1=0;

//int i=0;

//do{
try{
for(int i=0; i<ter;i++){
    for(int j=1; j<col+1;j++){
    value=(long) model.getValueAt(i, j);    
    total1= (total1+value);
    }
    
    total1=0;
    value=0;
  

 //   model.setValueAt(total1,i , col+1);
    
}
}catch(NullPointerException ex){
    
    JOptionPane.showMessageDialog(this,
   "Complete Todos Los Datos de La Tabla de Presupuesto de Ventas en Unidades",
   "Introducir Todos Los Datos",
   JOptionPane.ERROR_MESSAGE);
    return;
}

  String pvu="";
 pvu=txtpu.getText().trim();
    long pv=0; 
 pv=Long.parseLong(pvu);

for(int i=0; i<ter;i++){
    for(int j=1; j<col+1;j++){
    value=(long) model.getValueAt(i, j);    
    total1= (total1+value);
    }
    
    model.setValueAt(total1,i , col+1);
    total1=0;
    value=0;
 
}

for(int i=1; i<col+2;i++){
    for(int j=0; j<ter;j++){
  value=(long) model.getValueAt(j, i);    
    total1=(total1+value);
    }
    
    model.setValueAt((long)total1,ter ,i);
    total1=0;
    value=0;
 
}



for(int i=0; i<ter;i++){
    for(int j=1; j<col+1;j++){
    pvu1= (long) model.getValueAt(i, j)*pv;    
    model2.setValueAt(pvu1,i , j);
    }
    
    
pvu1=0;
 
}

jTable2.setModel(model2);


for(int i=0; i<ter;i++){
    for(int j=1; j<col+1;j++){
    value2=(long) model2.getValueAt(i, j);    
    total2= (total2+value2);
    }
    
    model2.setValueAt((long)total2,i , col+1);
    total2=0;
    value2=0;
 
}

for(int i=1; i<col+2;i++){
    for(int j=0; j<ter;j++){
  value2=(long) model2.getValueAt(j, i);    
    total2=(total2+value2);
    }
    
    model2.setValueAt((long)total2,ter ,i);
    total2=0;
    value2=0;
 
}
//}while(i<ter);
       
jTable1.setModel(model);
jTable2.setModel(model2); 
     
     

long produc=0;

 
for(int i=1; i<col+2;i++){
produc=(long) model.getValueAt(fila, i );
    model3.setValueAt(produc, 0, i);
    produc=0;   
}

   jTable1.setModel(model);
jTable2.setModel(model2);    
 
// TODO add your handling code here:
    }//GEN-LAST:event_btncalcularActionPerformed

    
     public void tablaspdf() throws DocumentException, FileNotFoundException{                  // se crea instancia del documento
        Document mipdf = new Document() {};
        // se establece una instancia a un documento pdf
        PdfWriter.getInstance(mipdf, new FileOutputStream(new File("C:\\Users\\Reymundo\\Desktop\\Presupuesto PDF\\PresupuestoMaestro.pdf")));
      
        mipdf.addTitle("Prespuesto Maestro");
         // se añade el titulo
        mipdf.addAuthor("Reymundo"); // se añade el autor del documento
//         mipdf.addSubject("Gerencial"); //se añade el asunto del documento

        mipdf.open(); // se abre el documento
            
         
//        mipdf.addKeywords("Muerto"); //Se agregan palabras claves                            
           
        /* ahora si tablas */           
        //mipdf.add(Tabla_Simple());
        
PdfPTable VentUnids=new PdfPTable(columna+1);
PdfPTable TVentUnids=new PdfPTable(1);

TVentUnids.addCell("Presupuesto de Ventas En Unidades");

for(int i=0;i<columna+1;i++){
VentUnids.addCell(model.getColumnName(i));
}
//tab.addCell("Address");
for(int j=0;j<jTable1.getRowCount();j++){
for(int i=0;i<columna+1;i++){
Object obj = GetData(jTable1, j, i);
if(obj==null){
    obj="-";
}
String value1=obj.toString();

VentUnids.addCell(value1);

}
}

mipdf.add(TVentUnids);
VentUnids.setSpacingAfter(15);
mipdf.add(VentUnids);

PdfPTable VentDine=new PdfPTable(columna+1);
PdfPTable TVentDine=new PdfPTable(1);

TVentDine.addCell("Presupuesto de Ventas En Dinero");

for(int i=0;i<columna+1;i++){
VentDine.addCell(model2.getColumnName(i));
}
//tab.addCell("Address");
for(int j=0;j<jTable2.getRowCount();j++){
for(int i=0;i<columna+1;i++){
Object obj = GetData(jTable2, j, i);
if(obj==null){
    obj="-";
}
String value1=obj.toString();

VentDine.addCell(value1);

}
}

mipdf.add(TVentDine);
VentDine.setSpacingAfter(15);
mipdf.add(VentDine);


PdfPTable Produccion=new PdfPTable(columna+1);
PdfPTable TProduccion=new PdfPTable(1);

TProduccion.addCell("Presupuesto de Producción");

for(int i=0;i<columna+1;i++){
Produccion.addCell(model3.getColumnName(i));
}
//tab.addCell("Address");
for(int j=0;j<jTable3.getRowCount();j++){
for(int i=0;i<columna+1;i++){
Object obj = GetData(jTable3, j, i);
if(obj==null){
    obj="-";
}
String value1=obj.toString();

Produccion.addCell(value1);

}
}

mipdf.add(TProduccion);
Produccion.setSpacingAfter(15);
mipdf.add(Produccion);



PdfPTable CMD=new PdfPTable(columna+1);
PdfPTable TCMD=new PdfPTable(1);

TCMD.addCell("Presupuesto de Compras de Materiales Directos");

for(int i=0;i<columna+1;i++){
CMD.addCell(model4.getColumnName(i));
}
//tab.addCell("Address");
for(int j=0;j<jTable4.getRowCount();j++){
for(int i=0;i<columna+1;i++){
Object obj = GetData(jTable4, j, i);
if(obj==null){
    obj="-";
}
String value1=obj.toString();

CMD.addCell(value1);

}
}

mipdf.add(TCMD);
CMD.setSpacingAfter(15);
mipdf.add(CMD);



PdfPTable ConsMD=new PdfPTable(columna+1);
PdfPTable TConsMD=new PdfPTable(1);

TConsMD.addCell("Presupuesto de Consumo de Materiales Directos");

for(int i=0;i<columna+1;i++){
ConsMD.addCell(model5.getColumnName(i));
}
//tab.addCell("Address");
for(int j=0;j<jTable5.getRowCount();j++){
for(int i=0;i<columna+1;i++){
Object obj = GetData(jTable5, j, i);
if(obj==null){
    obj="-";
}
String value1=obj.toString();

ConsMD.addCell(value1);

}
}

mipdf.add(TConsMD);
ConsMD.setSpacingAfter(15);
mipdf.add(ConsMD);



PdfPTable MOD=new PdfPTable(columna+1);
PdfPTable TMOD=new PdfPTable(1);

TMOD.addCell("Presupuesto de Mano de Obra Directa");

for(int i=0;i<columna+1;i++){
ConsMD.addCell(model7.getColumnName(i));
}
//tab.addCell("Address");
for(int j=0;j<jTable7.getRowCount();j++){
for(int i=0;i<columna+1;i++){
Object obj = GetData(jTable7, j, i);
if(obj==null){
    obj="-";
}
String value1=obj.toString();

MOD.addCell(value1);

}
}

mipdf.add(TMOD);
MOD.setSpacingAfter(15);
mipdf.add(MOD);



PdfPTable CIF=new PdfPTable(4);
PdfPTable TCIF=new PdfPTable(1);

TCIF.addCell("Presupuesto de Costos Indirectos de Fabricación");

for(int i=0;i<4;i++){
CIF.addCell(model9.getColumnName(i));
}
//tab.addCell("Address");
for(int j=0;j<jTable9.getRowCount();j++){
for(int i=0;i<4;i++){
Object obj = GetData(jTable9, j, i);

if(obj==null){
    obj="-";
}
String value1=obj.toString();

CIF.addCell(value1);

}
}

mipdf.add(TCIF);
CIF.setSpacingAfter(15);
mipdf.add(CIF);



PdfPTable CAV=new PdfPTable(columna+1);
PdfPTable TCAV=new PdfPTable(1);

TCAV.addCell("Presupuesto de Costo de Los Artículos Vendidos");

for(int i=0;i<columna+1;i++){
ConsMD.addCell(model10.getColumnName(i));
}
//tab.addCell("Address");
for(int j=0;j<jTable10.getRowCount();j++){
for(int i=0;i<columna+1;i++){
Object obj = GetData(jTable10, j, i);
if(obj==null){
    obj="-";
}
String value1=obj.toString();

CAV.addCell(value1);

}
}

mipdf.add(TCAV);
CAV.setSpacingAfter(15);
mipdf.add(CAV);


PdfPTable GV=new PdfPTable(4);
PdfPTable TGV=new PdfPTable(1);

TGV.addCell("Presupuesto de Gastos de Ventas");

for(int i=0;i<4;i++){
GV.addCell(model11.getColumnName(i));
}
//tab.addCell("Address");
for(int j=0;j<jTable11.getRowCount();j++){
for(int i=0;i<4;i++){
Object obj = GetData(jTable11, j, i);

if(obj==null){
    obj="-";
}
String value1=obj.toString();

GV.addCell(value1);

}
}

mipdf.add(TGV);
GV.setSpacingAfter(15);
mipdf.add(GV);



PdfPTable GA=new PdfPTable(2);
PdfPTable TGA=new PdfPTable(1);

TGA.addCell("Presupuesto de Gastos Administrativos");

for(int i=0;i<2;i++){
GA.addCell(model12.getColumnName(i));
}
//tab.addCell("Address");
for(int j=0;j<jTable12.getRowCount();j++){
for(int i=0;i<2;i++){
Object obj = GetData(jTable12, j, i);
if(obj==null){
    obj="-";
}
String value1=obj.toString();

GA.addCell(value1);

}
}

mipdf.add(TGA);
GA.setSpacingAfter(15);
mipdf.add(GA);




PdfPTable EIP=new PdfPTable(columna+1);
PdfPTable TEIP=new PdfPTable(1);

TEIP.addCell("Estado de Ingresos Presupuestados");

for(int i=0;i<columna+1;i++){
EIP.addCell(model13.getColumnName(i));
}
//tab.addCell("Address");
for(int j=0;j<jTable13.getRowCount();j++){
for(int i=0;i<columna+1;i++){
Object obj = GetData(jTable13, j, i);
if(obj==null){
    obj="-";
}
String value1=obj.toString();

EIP.addCell(value1);

}
}

mipdf.add(TEIP);
EIP.setSpacingAfter(15);
mipdf.add(EIP);




PdfPTable PC=new PdfPTable(columna+1);
PdfPTable TPC=new PdfPTable(1);

TPC.addCell("Presupuesto de Caja");

for(int i=0;i<columna+1;i++){
PC.addCell(model14.getColumnName(i));
}
//tab.addCell("Address");
for(int j=0;j<jTable14.getRowCount();j++){
for(int i=0;i<columna+1;i++){
Object obj = GetData(jTable14, j, i);
if(obj==null){
    obj="-";
}
String value1=obj.toString();

PC.addCell(value1);

}
}

mipdf.add(TPC);
PC.setSpacingAfter(15);
mipdf.add(PC);



         mipdf.close();
         //se cierra el PDF               
        JOptionPane.showMessageDialog(this, "Presupuesto Maestro Exportado a PDF Exitosamente", "Exportado Con Éxito", JOptionPane.INFORMATION_MESSAGE);
    }
     
     public Object GetData(JTable table, int row_index, int col_index){
return table.getModel().getValueAt(row_index, col_index);
}
    private void txtpuKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpuKeyTyped
 char c = evt.getKeyChar();

        double x=0;
        
        if("0".equals(txtpu.getText())&&txtpu.getCaretPosition()==1&&c!='.'&&!Character.isISOControl(c)){
      txtpu.setText(txtpu.getText()+".");
   //   return;
}

        if (c == '.' && txtpu.getText().contains(".")) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }

        String x1 = "";
         if(Character.isDigit(c)||(Character.isISOControl(c)&&!"".equals(txtpu.getText()))){
            x1 = txtpu.getText();
        }
        if(Character.isDigit(c)||(c == '.')){
            x1 = txtpu.getText().concat(String.valueOf(c));
        }
       
        if(!"".equals(x1)){
            x = Double.parseDouble(x1);     
        }

        if ((!Character.isDigit(c)) && (!Character.isISOControl(c))
            && (c != '.')||x>99999999) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }
        
        

        
                  // TODO add your handling code here:
    }//GEN-LAST:event_txtpuKeyTyped

    private void btncalcular1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncalcular1ActionPerformed
int col=0;

 if(rd3.isSelected()){
      col=3;
              }
 
 if(rd6.isSelected()){
  col=6;
 }
 
  if(rd12.isSelected()){
   col=12;
   }
  try{
       long [] hrs = new long[col]; 
    
        
        for(int i = 0 ; i<col;i++){
          hrs[i]= (long) model8.getValueAt(0, i+1);
            
        }
        double MIf=0,MOIf=0,MOIv=0,Supervision=0,ISNv=0,Mantef=0,Mantev=0,Caleff=0,
                Calefv=0,Energiaf=0,Energiav=0,Segurosf=0,Impuestosf=0,Depref=0,Variosf=0;
        
       if(
               "".equals(txtMIFijos.getText())||
                "".equals(txtMODFija.getText()) ||
                "".equals(txtSupervisionFijo.getText())||
                "".equals(txtMantFijo.getText())||
                "".equals(txtLuzFijo.getText())||
                "".equals(txtenergFija.getText())||
                "".equals(txtSeguros.getText())||
                "".equals(txtImpuFija.getText())||
                "".equals(txtDepre.getText())||
                "".equals(txtVarios.getText())
        ) {
           
           JOptionPane.showMessageDialog(this, "Introduzca Todos Los Datos", "Introduzca Todos Los Datos", JOptionPane.ERROR_MESSAGE);
           return;
       }
           
           
        MIf=Double.parseDouble(txtMIFijos.getText().trim());
        MOIf=Double.parseDouble(txtMODFija.getText().trim());
        Supervision=Double.parseDouble(txtSupervisionFijo.getText().trim());
        Mantef=Double.parseDouble(txtMantFijo.getText().trim());
        Caleff=Double.parseDouble(txtLuzFijo.getText().trim());
        Energiaf=Double.parseDouble(txtenergFija.getText().trim());
        Segurosf=Double.parseDouble(txtSeguros.getText().trim());
        Impuestosf=Double.parseDouble(txtImpuFija.getText().trim());
        Depref=Double.parseDouble(txtDepre.getText().trim());
        Variosf=Double.parseDouble(txtVarios.getText().trim());
        
        
                MOIv=Double.parseDouble(txtMOD.getText().trim());
                ISNv=Double.parseDouble(txtISN.getText().trim());
                Mantev=Double.parseDouble(txtMant.getText().trim());
                Calefv=Double.parseDouble(txtCalef.getText().trim());
                Energiav=Double.parseDouble(txtEnergi.getText().trim());
                
                
                long total=0;
                
                String [][] Datos= new String [(col*16)][4];
            String header7 [] = {"","Fijos","Variables","TOTAL"};
            model9.setColumnIdentifiers(header7);
                int i=0;  
                
                
                
                     long [] CIF = new long[col]; 
                     
                     
                for(int k=0;k<col;k++){
                    

Datos[i][0]="Horas de Mano de Obra Directa: "+hrs[k];
Datos[i][1]="-";
Datos[i][2]="-";

i=i+1;
Datos[i][0]="MES #"+(k+1);
Datos[i][1]="-";
Datos[i][2]="-";

i=i+1;
Datos[i][0]="Materiales Indirectos";
Datos[i][1]=String.valueOf(MIf);
Datos[i][2]="-";
Datos[i][3]=String.valueOf(MIf);

i=i+1;
Datos[i][0]="Mano de Obra Indirecta";
Datos[i][1]=String.valueOf(MOIf);
Datos[i][2]=String.valueOf(MOIv*(hrs[k]));
Datos[i][3]=String.valueOf((MOIf)+MOIv*(hrs[k]));


i=i+1;
Datos[i][0]="Supervisión";
Datos[i][1]=String.valueOf(Supervision);
Datos[i][2]="-";
Datos[i][3]=String.valueOf(Supervision);

i=i+1;
Datos[i][0]="Impuesto Sobre La Nómina";
Datos[i][1]="-";
Datos[i][2]=String.valueOf(ISNv*(hrs[k]));
Datos[i][3]=String.valueOf(ISNv*(hrs[k]));

i=i+1;
Datos[i][0]="Mantenimiento";
Datos[i][1]=String.valueOf(Mantef);
Datos[i][2]=String.valueOf(Mantev*(hrs[k]));
Datos[i][3]=String.valueOf((Mantef)+Mantev*(hrs[k]));

i=i+1;
Datos[i][0]="Calefacción y Luz";
Datos[i][1]=String.valueOf(Caleff);
Datos[i][2]=String.valueOf(Calefv*(hrs[k]));
Datos[i][3]=String.valueOf((Caleff)+Calefv*(hrs[k]));

i=i+1;
Datos[i][0]="Energía";
Datos[i][1]=String.valueOf(Energiaf);
Datos[i][2]=String.valueOf(Energiav*(hrs[k]));
Datos[i][3]=String.valueOf((Energiaf)+Energiav*(hrs[k]));

i=i+1;
Datos[i][0]="Seguros";
Datos[i][1]=String.valueOf(Segurosf);
Datos[i][2]="-";
Datos[i][3]=String.valueOf(Segurosf);

i=i+1;
Datos[i][0]="Impuestos";
Datos[i][1]=String.valueOf(Impuestosf);
Datos[i][2]="-";
Datos[i][3]=String.valueOf(Impuestosf);

i=i+1;
Datos[i][0]="Depreciación";
Datos[i][1]=String.valueOf(Depref);
Datos[i][2]="-";
Datos[i][3]=String.valueOf(Depref);

i=i+1;
Datos[i][0]="Varios";
Datos[i][1]="-";
Datos[i][2]=String.valueOf(Variosf*(hrs[k]));
Datos[i][3]=String.valueOf(Variosf*(hrs[k]));


total=0;

i=i+1;
Datos[i][0]="      TOTAl";
total=(long) (MIf+MOIf+Supervision+Mantef+Caleff+Energiaf+Segurosf+Impuestosf+Depref);
Datos[i][1]=String.valueOf(total);
total=0;
total=(long) (MOIv*(hrs[k])+ISNv*(hrs[k])+Mantev*(hrs[k])+Calefv*(hrs[k])+Energiav*(hrs[k])+Variosf*(hrs[k]));
Datos[i][2]=String.valueOf(total);
total=0;
total=(long) ((MIf)+((MOIf)+(MOIv*(hrs[k]))+(Supervision)+(ISNv*(hrs[k]))+((Mantef)+Mantev*(hrs[k]))+ 
        ((Caleff)+(Calefv*(hrs[k])))+(Energiaf)+(Energiav*(hrs[k]))+(Segurosf)+(Impuestosf)+(Depref)+(Variosf*(hrs[k]))) );
Datos[i][3]=String.valueOf(total);
CIF[k]=total;
total=0;



i=i+1;
Datos[i][0]="===";
Datos[i][1]="===";
Datos[i][2]="===";

i=i+1;
Datos[i][0]="---";
Datos[i][1]="---";
Datos[i][2]="---";


                }
                
                model9.setDataVector(Datos, header7);
                
         jTable9.setModel(model9);      
         
         long CTM = 0;
         long PCMD=0;
         long PMOD=0;
         
         for(int j=0;j<col;j++){
             
          PCMD=(long) model5.getValueAt(2, j+1);
          PMOD=(long) model7.getValueAt(3, j+1);
          
           model10.setValueAt(PCMD, 0, j+1);
           model10.setValueAt(PMOD, 1, j+1);
           model10.setValueAt(CIF[j], 2, j+1);
           CTM=0;
           CTM=PCMD+PMOD+CIF[j];
           model10.setValueAt(CTM, 3, j+1);
           
           PCMD=0;
           PMOD=0;
             
         }
         
         jTable10.setModel(model10);
       
          }catch(NullPointerException ex){

            JOptionPane.showMessageDialog(this,
                "Complete Todos Los Datos de La Tabla de Presupuesto de Costos Indirectos de Fabricación",
                "Introducir Todos Los Datos",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
// TODO add your handling code here:
    }//GEN-LAST:event_btncalcular1ActionPerformed

    private void btnCalcular3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcular3ActionPerformed
long UnidsCMDR=0;
long IFD=0;
int col=0;
long Subt=0;
long II=0;
long CompReq=0;
long CostComp=0;

if("".equals(txtCantMD.getText()) 
        || "".equals(txtProdSig.getText()) 
        || "".equals(txtPorcProd.getText())
        || "".equals(txtPPU.getText()) ){
    
    
    JOptionPane.showMessageDialog(this, "Introduzca Todos Los Datos Solicitados", "Introducir Todo", JOptionPane.ERROR_MESSAGE);
    return;
    
    
}
else{

int UnidsMDR= Integer.parseInt(txtCantMD.getText().trim());
double PorcIF= Double.parseDouble(txtPorcProd.getText().trim())/100;
int ProdSig= Integer.parseInt(txtProdSig.getText().trim());
double PP = Double.parseDouble(txtPPU.getText().trim());

 if(rd3.isSelected()){
      col=3;
              }
 
 if(rd6.isSelected()){
  col=6;
 }
 
  if(rd12.isSelected()){
   col=12;
   }
 
  
 try{
  for(int i=1; i<col+1;i++){
UnidsCMDR=(long) model4.getValueAt(0, i )*UnidsMDR;
    model4.setValueAt(UnidsCMDR, 1, i);
    UnidsCMDR=0;   
}

  
for(int i=2; i<col+1;i++){
IFD=(long) ((long) model4.getValueAt(1, i )* PorcIF);
    model4.setValueAt(IFD, 2, i-1);
    IFD=0;   
}


IFD=(long) (ProdSig * PorcIF);
    model4.setValueAt(IFD, 2,col);
    IFD=0;   

for(int i=1; i<col+1;i++){
Subt=(long) model4.getValueAt(1, i )+ (long) model4.getValueAt(2, i );
    model4.setValueAt(Subt, 3, i);
    Subt=0;   
}

for(int i=1; i<col+1;i++){
II=(long) ((long) model4.getValueAt(0, i ) * PorcIF);
    model4.setValueAt(II, 4, i);
    II=0;   
}

for(int i=1; i<col+1;i++){
CompReq=(long) model4.getValueAt(3, i ) -(long) model4.getValueAt(4, i ) ;
    model4.setValueAt(CompReq, 5, i);
    CompReq=0;   
}

for(int i=1; i<col+1;i++){

    model4.setValueAt("x $ "+PP, 6, i);

}

for(int i=1; i<col+1;i++){
CostComp=(long) ((long) model4.getValueAt(5, i ) * PP) ;
    model4.setValueAt(CostComp, 7, i);
   
    CostComp=0;   
}

long value=0;
long total1=0;

for(int i=0; i<8;i++){
    for(int j=1; j<col+1;j++){
        if(i==6){
          //  model4.setValueAt("x $ "+PP, 6, j);
        }
        else{
    value=(long) model4.getValueAt(i, j);    
    total1= (total1+value);
        }
    }
    
    model4.setValueAt(total1,i , col+1);
    total1=0;
    value=0;
 
}

      model4.setValueAt("x $ "+PP, 6, col+1);


      long UnidsMD=0;

 
for(int i=1; i<col+2;i++){
UnidsMD=(long) model4.getValueAt(1, i );
    model5.setValueAt(UnidsMD, 0, i);
   
    UnidsMD=0;   
}

for(int i=1; i<col+2;i++){
 model5.setValueAt("x $ "+PP, 1, i); 
}

long consumo=0;

for(int i=1; i<col+2;i++){
consumo =(long) ((long) model5.getValueAt(0, i ) * PP) ;
 model5.setValueAt(consumo, 2, i); 
}




long UnidsReq=0;

 
for(int i=1; i<col+2;i++){
UnidsReq=(long) model5.getValueAt(0, i );
    model7.setValueAt(UnidsReq, 0, i);
   
    UnidsReq=0;   
}



jTable4.setModel(model4);
jTable5.setModel(model5);
jTable6.setModel(model6);

 }catch(NullPointerException ex){

            JOptionPane.showMessageDialog(this,
                "Complete Todos Los Datos de La Tabla de Presupuesto de Compras de Materiales Directos",
                "Introducir Todos Los Datos",
                JOptionPane.ERROR_MESSAGE);
            return;
        }

}


 

        // TODO add your handling code here:
    }//GEN-LAST:event_btnCalcular3ActionPerformed

    private void txtPorcProdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPorcProdKeyTyped
char c = evt.getKeyChar();

        double x=0;
        
        
        if(txtPorcProd.getCaretPosition()==0&&!Character.isISOControl(c)&&!Character.isDigit(c)){
            
             Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
            
        }
        
        
        if("0".equals(txtPorcProd.getText())&&txtPorcProd.getCaretPosition()==1&&c!='.'&&!Character.isISOControl(c)){
      txtPorcProd.setText(txtPorcProd.getText()+".");
   //   return;
}

        if (c == '.' && txtPorcProd.getText().contains(".")) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }

        String x1 = "";
         if(Character.isDigit(c)||(Character.isISOControl(c)&&!"".equals(txtPorcProd.getText()))){
            x1 = txtPorcProd.getText();
        }
        if(Character.isDigit(c)||(c == '.')){
            x1 = txtPorcProd.getText().concat(String.valueOf(c));
        }
       
        if(!"".equals(x1)){
            x = Double.parseDouble(x1);     
        }

        if ((!Character.isDigit(c)) && (!Character.isISOControl(c))
            && (c != '.')||x>99999999) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }        // TODO add your handling code here:
                                   

                                       
          // TODO add your handling code here:
    }//GEN-LAST:event_txtPorcProdKeyTyped

    private void txtPPUKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPPUKeyTyped
char c = evt.getKeyChar();

        double x=0;
        
        
        if(txtPPU.getCaretPosition()==0&&!Character.isISOControl(c)&&!Character.isDigit(c)){
            
             Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
            
        }
        
        if("0".equals(txtPPU.getText())&&txtPPU.getCaretPosition()==1&&c!='.'&&!Character.isISOControl(c)){
      txtPPU.setText(txtPPU.getText()+".");
   //   return;
}

        if (c == '.' && txtPPU.getText().contains(".")) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }

        String x1 = "";
         if(Character.isDigit(c)||(Character.isISOControl(c)&&!"".equals(txtPPU.getText()))){
            x1 = txtPPU.getText();
        }
        if(Character.isDigit(c)||(c == '.')){
            x1 = txtPPU.getText().concat(String.valueOf(c));
        }
       
        if(!"".equals(x1)){
            x = Double.parseDouble(x1);     
        }

        if ((!Character.isDigit(c)) && (!Character.isISOControl(c))
            && (c != '.')||x>99999999) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }    
    // TODO add your handling code here:
    }//GEN-LAST:event_txtPPUKeyTyped

    private void txtCantMDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantMDKeyTyped
 char c = evt.getKeyChar();
    
    if(!Character.isDigit(c)&&!Character.isISOControl(c)){
        Toolkit.getDefaultToolkit().beep();
        evt.consume();
        
        
    } 
    
    if(txtCantMD.getCaretPosition()==0&&c=='0'){
        
         Toolkit.getDefaultToolkit().beep();
        evt.consume();
        
        
    }// TODO add your handling code here:
    }//GEN-LAST:event_txtCantMDKeyTyped

    private void txtProdSigKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtProdSigKeyTyped
       char c = evt.getKeyChar();
    
    if(!Character.isDigit(c)&&!Character.isISOControl(c)){
        Toolkit.getDefaultToolkit().beep();
        evt.consume();
        
        
    } 
    
    if(txtProdSig.getCaretPosition()==0&&c=='0'){
        
         Toolkit.getDefaultToolkit().beep();
        evt.consume();
        
        
    }// TODO add your handling code here:
    }//GEN-LAST:event_txtProdSigKeyTyped

    private void btncalcular2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncalcular2ActionPerformed

 long HrMOD =0;
double Tasa = 0;
long CostoMOD = 0;
    
int col=0;

 if(rd3.isSelected()){
      col=3;
              }
 
 if(rd6.isSelected()){
  col=6;
 }
 
  if(rd12.isSelected()){
   col=12;
   }
  
  try{
 double[]costo = new double [col];
 double [] hr = new double [col];
 
 
 
 for(int i=0;i<col;i++){
     
     hr [i] = (double) model6.getValueAt(i, 1);
     costo [i] = (double) model6.getValueAt(i, 2);
        
     
 }
 
for(int i=1; i<col+1;i++){
HrMOD=(long) ((long) model7.getValueAt(0, i )*hr[i-1]);
Tasa = costo[i-1];
model7.setValueAt(HrMOD, 1, i);
model7.setValueAt(Tasa, 2, i);
model8.setValueAt(HrMOD, 0, i);

HrMOD=0;
Tasa = 0;
}

double tasa1 = 0;
for(int i=1; i<col+1;i++){
    tasa1= (double) model7.getValueAt(2, i );
CostoMOD=  (long) ((long) model7.getValueAt(1, i )*tasa1);   
model7.setValueAt(CostoMOD, 3, i);
tasa1=0;
CostoMOD=0;
        }


long value=0;
long total1=0;

for(int i=0; i<4;i++){
    for(int j=1; j<col+1;j++){
        if(i==2){
          //  model4.setValueAt("x $ "+PP, 6, j);
        }
        else{
    value=(long) model7.getValueAt(i, j);    
    total1= (total1+value);
        }
    }
    
    model7.setValueAt(total1,i , col+1);
    total1=0;
    value=0;
 
}
double tasapromedio = 0;
double tasapromedio1 = 0;
double totalpromedio = 0;
int div = 0;

for(int i=1;i<col+1;i++){
tasapromedio =   (double) model7.getValueAt(2, i);
totalpromedio = totalpromedio + tasapromedio;
}

div =  col;
tasapromedio1 =totalpromedio/div;

model7.setValueAt(tasapromedio1, 2, col+1);


        
jTable7.setModel(model7);

      }catch(NullPointerException ex){

            JOptionPane.showMessageDialog(this,
                "Complete Todos Los Datos de La Tabla de Horas Estimadas de Mano de Obra Directa",
                "Introducir Todos Los Datos",
                JOptionPane.ERROR_MESSAGE);
            return;
        }   
        // TODO add your handling code here:
    }//GEN-LAST:event_btncalcular2ActionPerformed

    private void txtMODKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMODKeyTyped
char c = evt.getKeyChar();

        double x=0;
        
        
        if(txtMOD.getCaretPosition()==0&&!Character.isISOControl(c)&&!Character.isDigit(c)){
            
             Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
            
        }
        
        
        if("0".equals(txtMOD.getText())&&txtMOD.getCaretPosition()==1&&c!='.'&&!Character.isISOControl(c)){
      txtMOD.setText(txtMOD.getText()+".");
   //   return;
}

        if (c == '.' && txtMOD.getText().contains(".")) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }

        String x1 = "";
         if(Character.isDigit(c)||(Character.isISOControl(c)&&!"".equals(txtMOD.getText()))){
            x1 = txtMOD.getText();
        }
        if(Character.isDigit(c)||(c == '.')){
            x1 = txtMOD.getText().concat(String.valueOf(c));
        }
       
        if(!"".equals(x1)){
            x = Double.parseDouble(x1);     
        }

        if ((!Character.isDigit(c)) && (!Character.isISOControl(c))
            && (c != '.')||x>99999999) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }        // TODO add your handling code here:
                                   

                                       
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMODKeyTyped

    private void txtDepreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDepreKeyTyped
char c = evt.getKeyChar();

        double x=0;
        
        
        if(txtDepre.getCaretPosition()==0&&!Character.isISOControl(c)&&!Character.isDigit(c)){
            
             Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
            
        }
        
        
        if("0".equals(txtDepre.getText())&&txtDepre.getCaretPosition()==1&&c!='.'&&!Character.isISOControl(c)){
      txtDepre.setText(txtDepre.getText()+".");
   //   return;
}

        if (c == '.' && txtDepre.getText().contains(".")) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }

        String x1 = "";
         if(Character.isDigit(c)||(Character.isISOControl(c)&&!"".equals(txtDepre.getText()))){
            x1 = txtDepre.getText();
        }
        if(Character.isDigit(c)||(c == '.')){
            x1 = txtDepre.getText().concat(String.valueOf(c));
        }
       
        if(!"".equals(x1)){
            x = Double.parseDouble(x1);     
        }

        if ((!Character.isDigit(c)) && (!Character.isISOControl(c))
            && (c != '.')||x>99999999) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }        // TODO add your handling code here:
                                   

    
        
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDepreKeyTyped

    private void txtISNKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtISNKeyTyped
char c = evt.getKeyChar();

        double x=0;
        
        
        if(txtISN.getCaretPosition()==0&&!Character.isISOControl(c)&&!Character.isDigit(c)){
            
             Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
            
        }
        
        
        if("0".equals(txtISN.getText())&&txtISN.getCaretPosition()==1&&c!='.'&&!Character.isISOControl(c)){
      txtISN.setText(txtISN.getText()+".");
   //   return;
}

        if (c == '.' && txtISN.getText().contains(".")) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }

        String x1 = "";
         if(Character.isDigit(c)||(Character.isISOControl(c)&&!"".equals(txtISN.getText()))){
            x1 = txtISN.getText();
        }
        if(Character.isDigit(c)||(c == '.')){
            x1 = txtISN.getText().concat(String.valueOf(c));
        }
       
        if(!"".equals(x1)){
            x = Double.parseDouble(x1);     
        }

        if ((!Character.isDigit(c)) && (!Character.isISOControl(c))
            && (c != '.')||x>99999999) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }        // TODO add your handling code here:
                                   
        // TODO add your handling code here:
    }//GEN-LAST:event_txtISNKeyTyped

    private void txtMantKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMantKeyTyped
char c = evt.getKeyChar();

        double x=0;
        
        
        if(txtMant.getCaretPosition()==0&&!Character.isISOControl(c)&&!Character.isDigit(c)){
            
             Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
            
        }
        
        
        if("0".equals(txtMant.getText())&&txtMant.getCaretPosition()==1&&c!='.'&&!Character.isISOControl(c)){
      txtMant.setText(txtMant.getText()+".");
   //   return;
}

        if (c == '.' && txtMant.getText().contains(".")) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }

        String x1 = "";
         if(Character.isDigit(c)||(Character.isISOControl(c)&&!"".equals(txtMant.getText()))){
            x1 = txtMant.getText();
        }
        if(Character.isDigit(c)||(c == '.')){
            x1 = txtMant.getText().concat(String.valueOf(c));
        }
       
        if(!"".equals(x1)){
            x = Double.parseDouble(x1);     
        }

        if ((!Character.isDigit(c)) && (!Character.isISOControl(c))
            && (c != '.')||x>99999999) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }        // TODO add your handling code here:
                                   
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMantKeyTyped

    private void txtCalefKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCalefKeyTyped
char c = evt.getKeyChar();

        double x=0;
        
        
        if(txtCalef.getCaretPosition()==0&&!Character.isISOControl(c)&&!Character.isDigit(c)){
            
             Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
            
        }
        
        
        if("0".equals(txtCalef.getText())&&txtCalef.getCaretPosition()==1&&c!='.'&&!Character.isISOControl(c)){
      txtCalef.setText(txtCalef.getText()+".");
   //   return;
}

        if (c == '.' && txtCalef.getText().contains(".")) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }

        String x1 = "";
         if(Character.isDigit(c)||(Character.isISOControl(c)&&!"".equals(txtCalef.getText()))){
            x1 = txtCalef.getText();
        }
        if(Character.isDigit(c)||(c == '.')){
            x1 = txtCalef.getText().concat(String.valueOf(c));
        }
       
        if(!"".equals(x1)){
            x = Double.parseDouble(x1);     
        }

        if ((!Character.isDigit(c)) && (!Character.isISOControl(c))
            && (c != '.')||x>99999999) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }        // TODO add your handling code here:
                                   
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCalefKeyTyped

    private void txtEnergiKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEnergiKeyTyped
char c = evt.getKeyChar();

        double x=0;
        
        
        if(txtEnergi.getCaretPosition()==0&&!Character.isISOControl(c)&&!Character.isDigit(c)){
            
             Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
            
        }
        
        
        if("0".equals(txtEnergi.getText())&&txtEnergi.getCaretPosition()==1&&c!='.'&&!Character.isISOControl(c)){
      txtEnergi.setText(txtEnergi.getText()+".");
   //   return;
}

        if (c == '.' && txtEnergi.getText().contains(".")) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }

        String x1 = "";
         if(Character.isDigit(c)||(Character.isISOControl(c)&&!"".equals(txtEnergi.getText()))){
            x1 = txtEnergi.getText();
        }
        if(Character.isDigit(c)||(c == '.')){
            x1 = txtEnergi.getText().concat(String.valueOf(c));
        }
       
        if(!"".equals(x1)){
            x = Double.parseDouble(x1);     
        }

        if ((!Character.isDigit(c)) && (!Character.isISOControl(c))
            && (c != '.')||x>99999999) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }        // TODO add your handling code here:
                                   
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEnergiKeyTyped

    private void txtVariosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtVariosKeyTyped
char c = evt.getKeyChar();

        double x=0;
        
        
        if(txtVarios.getCaretPosition()==0&&!Character.isISOControl(c)&&!Character.isDigit(c)){
            
             Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
            
        }
        
        
        if("0".equals(txtVarios.getText())&&txtVarios.getCaretPosition()==1&&c!='.'&&!Character.isISOControl(c)){
      txtVarios.setText(txtVarios.getText()+".");
   //   return;
}

        if (c == '.' && txtVarios.getText().contains(".")) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }

        String x1 = "";
         if(Character.isDigit(c)||(Character.isISOControl(c)&&!"".equals(txtVarios.getText()))){
            x1 = txtVarios.getText();
        }
        if(Character.isDigit(c)||(c == '.')){
            x1 = txtVarios.getText().concat(String.valueOf(c));
        }
       
        if(!"".equals(x1)){
            x = Double.parseDouble(x1);     
        }

        if ((!Character.isDigit(c)) && (!Character.isISOControl(c))
            && (c != '.')||x>99999999) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }        // TODO add your handling code here:
                                   
        // TODO add your handling code here:
    }//GEN-LAST:event_txtVariosKeyTyped

    private void txtImpuFijaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtImpuFijaKeyTyped
char c = evt.getKeyChar();

        double x=0;
        
        
        if(txtImpuFija.getCaretPosition()==0&&!Character.isISOControl(c)&&!Character.isDigit(c)){
            
             Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
            
        }
        
        
        if("0".equals(txtImpuFija.getText())&&txtImpuFija.getCaretPosition()==1&&c!='.'&&!Character.isISOControl(c)){
      txtImpuFija.setText(txtImpuFija.getText()+".");
   //   return;
}

        if (c == '.' && txtImpuFija.getText().contains(".")) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }

        String x1 = "";
         if(Character.isDigit(c)||(Character.isISOControl(c)&&!"".equals(txtImpuFija.getText()))){
            x1 = txtImpuFija.getText();
        }
        if(Character.isDigit(c)||(c == '.')){
            x1 = txtImpuFija.getText().concat(String.valueOf(c));
        }
       
        if(!"".equals(x1)){
            x = Double.parseDouble(x1);     
        }

        if ((!Character.isDigit(c)) && (!Character.isISOControl(c))
            && (c != '.')||x>99999999) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }        // TODO add your handling code here:
                                   

        // TODO add your handling code here:
    }//GEN-LAST:event_txtImpuFijaKeyTyped

    private void txtSegurosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSegurosKeyTyped
char c = evt.getKeyChar();

        double x=0;
        
        
        if(txtSeguros.getCaretPosition()==0&&!Character.isISOControl(c)&&!Character.isDigit(c)){
            
             Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
            
        }
        
        
        if("0".equals(txtSeguros.getText())&&txtSeguros.getCaretPosition()==1&&c!='.'&&!Character.isISOControl(c)){
      txtSeguros.setText(txtSeguros.getText()+".");
   //   return;
}

        if (c == '.' && txtSeguros.getText().contains(".")) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }

        String x1 = "";
         if(Character.isDigit(c)||(Character.isISOControl(c)&&!"".equals(txtSeguros.getText()))){
            x1 = txtSeguros.getText();
        }
        if(Character.isDigit(c)||(c == '.')){
            x1 = txtSeguros.getText().concat(String.valueOf(c));
        }
       
        if(!"".equals(x1)){
            x = Double.parseDouble(x1);     
        }

        if ((!Character.isDigit(c)) && (!Character.isISOControl(c))
            && (c != '.')||x>99999999) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }        // TODO add your handling code here:
                                   

       // TODO add your handling code here:
    }//GEN-LAST:event_txtSegurosKeyTyped

    private void txtMIFijosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMIFijosKeyTyped
char c = evt.getKeyChar();

        double x=0;
        
        
        if(txtMIFijos.getCaretPosition()==0&&!Character.isISOControl(c)&&!Character.isDigit(c)){
            
             Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
            
        }
        
        
        if("0".equals(txtMIFijos.getText())&&txtMIFijos.getCaretPosition()==1&&c!='.'&&!Character.isISOControl(c)){
      txtMIFijos.setText(txtMIFijos.getText()+".");
   //   return;
}

        if (c == '.' && txtMIFijos.getText().contains(".")) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }

        String x1 = "";
         if(Character.isDigit(c)||(Character.isISOControl(c)&&!"".equals(txtMIFijos.getText()))){
            x1 = txtMIFijos.getText();
        }
        if(Character.isDigit(c)||(c == '.')){
            x1 = txtMIFijos.getText().concat(String.valueOf(c));
        }
       
        if(!"".equals(x1)){
            x = Double.parseDouble(x1);     
        }

        if ((!Character.isDigit(c)) && (!Character.isISOControl(c))
            && (c != '.')||x>99999999) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }        // TODO add your handling code here:
                                   

       // TODO add your handling code here:
    }//GEN-LAST:event_txtMIFijosKeyTyped

    private void txtMODFijaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMODFijaKeyTyped
char c = evt.getKeyChar();

        double x=0;
        
        
        if(txtMODFija.getCaretPosition()==0&&!Character.isISOControl(c)&&!Character.isDigit(c)){
            
             Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
            
        }
        
        
        if("0".equals(txtMODFija.getText())&&txtMODFija.getCaretPosition()==1&&c!='.'&&!Character.isISOControl(c)){
      txtMODFija.setText(txtMODFija.getText()+".");
   //   return;
}

        if (c == '.' && txtMODFija.getText().contains(".")) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }

        String x1 = "";
         if(Character.isDigit(c)||(Character.isISOControl(c)&&!"".equals(txtMODFija.getText()))){
            x1 = txtMODFija.getText();
        }
        if(Character.isDigit(c)||(c == '.')){
            x1 = txtMODFija.getText().concat(String.valueOf(c));
        }
       
        if(!"".equals(x1)){
            x = Double.parseDouble(x1);     
        }

        if ((!Character.isDigit(c)) && (!Character.isISOControl(c))
            && (c != '.')||x>99999999) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }        // TODO add your handling code here:
                                   

        // TODO add your handling code here:
    }//GEN-LAST:event_txtMODFijaKeyTyped

    private void txtSupervisionFijoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSupervisionFijoKeyTyped
char c = evt.getKeyChar();

        double x=0;
        
        
        if(txtSupervisionFijo.getCaretPosition()==0&&!Character.isISOControl(c)&&!Character.isDigit(c)){
            
             Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
            
        }
        
        
        if("0".equals(txtSupervisionFijo.getText())&&txtSupervisionFijo.getCaretPosition()==1&&c!='.'&&!Character.isISOControl(c)){
      txtSupervisionFijo.setText(txtSupervisionFijo.getText()+".");
   //   return;
}

        if (c == '.' && txtSupervisionFijo.getText().contains(".")) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }

        String x1 = "";
         if(Character.isDigit(c)||(Character.isISOControl(c)&&!"".equals(txtSupervisionFijo.getText()))){
            x1 = txtSupervisionFijo.getText();
        }
        if(Character.isDigit(c)||(c == '.')){
            x1 = txtSupervisionFijo.getText().concat(String.valueOf(c));
        }
       
        if(!"".equals(x1)){
            x = Double.parseDouble(x1);     
        }

        if ((!Character.isDigit(c)) && (!Character.isISOControl(c))
            && (c != '.')||x>99999999) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }        // TODO add your handling code here:
                                   

        // TODO add your handling code here:
    }//GEN-LAST:event_txtSupervisionFijoKeyTyped

    private void txtMantFijoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMantFijoKeyTyped
char c = evt.getKeyChar();

        double x=0;
        
        
        if(txtMantFijo.getCaretPosition()==0&&!Character.isISOControl(c)&&!Character.isDigit(c)){
            
             Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
            
        }
        
        
        if("0".equals(txtMantFijo.getText())&&txtMantFijo.getCaretPosition()==1&&c!='.'&&!Character.isISOControl(c)){
      txtMantFijo.setText(txtMantFijo.getText()+".");
   //   return;
}

        if (c == '.' && txtMantFijo.getText().contains(".")) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }

        String x1 = "";
         if(Character.isDigit(c)||(Character.isISOControl(c)&&!"".equals(txtMantFijo.getText()))){
            x1 = txtMantFijo.getText();
        }
        if(Character.isDigit(c)||(c == '.')){
            x1 = txtMantFijo.getText().concat(String.valueOf(c));
        }
       
        if(!"".equals(x1)){
            x = Double.parseDouble(x1);     
        }

        if ((!Character.isDigit(c)) && (!Character.isISOControl(c))
            && (c != '.')||x>99999999) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }        // TODO add your handling code here:
                                   

     // TODO add your handling code here:
    }//GEN-LAST:event_txtMantFijoKeyTyped

    private void txtLuzFijoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLuzFijoKeyTyped
char c = evt.getKeyChar();

        double x=0;
        
        
        if(txtLuzFijo.getCaretPosition()==0&&!Character.isISOControl(c)&&!Character.isDigit(c)){
            
             Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
            
        }
        
        
        if("0".equals(txtLuzFijo.getText())&&txtLuzFijo.getCaretPosition()==1&&c!='.'&&!Character.isISOControl(c)){
      txtLuzFijo.setText(txtLuzFijo.getText()+".");
   //   return;
}

        if (c == '.' && txtLuzFijo.getText().contains(".")) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }

        String x1 = "";
         if(Character.isDigit(c)||(Character.isISOControl(c)&&!"".equals(txtLuzFijo.getText()))){
            x1 = txtLuzFijo.getText();
        }
        if(Character.isDigit(c)||(c == '.')){
            x1 = txtLuzFijo.getText().concat(String.valueOf(c));
        }
       
        if(!"".equals(x1)){
            x = Double.parseDouble(x1);     
        }

        if ((!Character.isDigit(c)) && (!Character.isISOControl(c))
            && (c != '.')||x>99999999) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }        // TODO add your handling code here:
                                   

    // TODO add your handling code here:
    }//GEN-LAST:event_txtLuzFijoKeyTyped

    private void txtenergFijaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtenergFijaKeyTyped
char c = evt.getKeyChar();

        double x=0;
        
        
        if(txtenergFija.getCaretPosition()==0&&!Character.isISOControl(c)&&!Character.isDigit(c)){
            
             Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
            
        }
        
        
        if("0".equals(txtenergFija.getText())&&txtenergFija.getCaretPosition()==1&&c!='.'&&!Character.isISOControl(c)){
      txtenergFija.setText(txtenergFija.getText()+".");
   //   return;
}

        if (c == '.' && txtenergFija.getText().contains(".")) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }

        String x1 = "";
         if(Character.isDigit(c)||(Character.isISOControl(c)&&!"".equals(txtenergFija.getText()))){
            x1 = txtenergFija.getText();
        }
        if(Character.isDigit(c)||(c == '.')){
            x1 = txtenergFija.getText().concat(String.valueOf(c));
        }
       
        if(!"".equals(x1)){
            x = Double.parseDouble(x1);     
        }

        if ((!Character.isDigit(c)) && (!Character.isISOControl(c))
            && (c != '.')||x>99999999) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }        // TODO add your handling code here:
                                   

       // TODO add your handling code here:
    }//GEN-LAST:event_txtenergFijaKeyTyped

    private void btncalcular4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncalcular4ActionPerformed
        long subt=0;
        long total=0;
        int col=0;

        if(rd3.isSelected()){
            col=3;
        }

        if(rd6.isSelected()){
            col=6;
        }

        if(rd12.isSelected()){
            col=12;
        }

        try{
     long II=0;

        for(int i=1; i<col;i++){
            II=(long) model3.getValueAt(1, i );
            model3.setValueAt(II, 3, i+1);
            II=0;
        }

        
        
        
            for(int i=1; i<col+1;i++){
                subt=(long) model3.getValueAt(0, i ) + (long) model3.getValueAt(1, i ) ;
                model3.setValueAt(subt, 2, i);
                subt=0;
            }
       

       
            for(int i=1; i<col+1;i++){
                total=(long) model3.getValueAt(2, i ) - (long) model3.getValueAt(3, i ) ;
                model3.setValueAt(total, 4, i);
                total=0;
            }

     

        for(int i=1; i<col+1;i++){
            subt=(long) model3.getValueAt(0, i ) + (long) model3.getValueAt(1, i ) ;
            model3.setValueAt(subt, 2, i);
            subt=0;
        }

        for(int i=1; i<col+1;i++){
            total=(long) model3.getValueAt(2, i ) - (long) model3.getValueAt(3, i ) ;
            model3.setValueAt(total, 4, i);
            total=0;
        }

        long total1=0;

        for(int j=1;j<5;j++){

            for(int i=1; i<col+1;i++){

                total1=total1+(long) model3.getValueAt(j, i);

            }
            model3.setValueAt(total1, j, col+1);
            total1=0;

        }

        long UnidsMD=0;

        for(int i=1; i<col+2;i++){
            UnidsMD=(long) model3.getValueAt(4, i );
            model4.setValueAt(UnidsMD, 0, i);

            UnidsMD=0;
        }

        jTable1.setModel(model);
        jTable2.setModel(model2);

        jTable3.setModel(model3);
        jTable4.setModel(model4);
       
         }catch(NullPointerException ex){

            JOptionPane.showMessageDialog(this,
                "Complete Todos Los Datos de La Tabla de Presupuesto de Producción",
                "Introducir Todos Los Datos",
                JOptionPane.ERROR_MESSAGE);
            return;
        }// TODO add your handling code here:
    }//GEN-LAST:event_btncalcular4ActionPerformed

    private void txtMODFijaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMODFijaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMODFijaActionPerformed

    private void txtIIATKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIIATKeyTyped
  char c = evt.getKeyChar();
    
    if(!Character.isDigit(c)&&!Character.isISOControl(c)){
        Toolkit.getDefaultToolkit().beep();
        evt.consume();
        
        
    } 
    
    if(txtIIAT.getCaretPosition()==0&&c=='0'){
        
         Toolkit.getDefaultToolkit().beep();
        evt.consume();
        
        
    }        // TODO add your handling code here:
    }//GEN-LAST:event_txtIIATKeyTyped

    private void btncalcular5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncalcular5ActionPerformed
        int col=0;

        if(rd3.isSelected()){
            col=3;
        }

        if(rd6.isSelected()){
            col=6;
        }

        if(rd12.isSelected()){
            col=12;
        }
        long IIAT = 0;
        long IIAT1=0;
        long UPR=0;
        float Tarifa=0;
        long IFD=0;
        long Final=0;
        
        try{
            
            if("".equals(txtIIAT.getText())){
  JOptionPane.showMessageDialog(this, "Introduzca Todos Los Datos", "Introduzca Todos Los Datos", JOptionPane.ERROR_MESSAGE);
           return;
       }
            
        if(!"".equals(txtIIAT.getText())){
            IIAT = Long.parseLong(txtIIAT.getText().trim());
            model10.setValueAt(IIAT, 4 , 1);

            for(int j=0;j<col-1;j++){

                IIAT1=(long) model10.getValueAt(3, j+1);
                UPR=(long) model3.getValueAt(4, j+1);
                Tarifa=(float)IIAT1/UPR;
                IFD=(long) model3.getValueAt(1, j+1);
                Final=(long) (Tarifa*IFD);
                //
                //             System.out.println("IIAT1 ="+IIAT1);
                //             System.out.println("UPR ="+UPR);
                //             System.out.println("TARIGA ="+Tarifa);
                //             System.out.println("IFD ="+IFD);
                //             System.out.println("FINAL ="+Final);
                //
                model10.setValueAt(Final, 4, j+2);

                IIAT = 0;
                IIAT1=0;
                UPR=0;
                Tarifa=0;
                IFD=0;
                Final=0;

            }

            long Sum = 0;
            long Sum1 = 0;
            long Tot = 0;

            for(int j=0;j<col;j++){

                Sum = (long) model10.getValueAt(3, j+1);
                Sum1 = (long) model10.getValueAt(4, j+1);
                Tot= Sum+Sum1;

                model10.setValueAt(Tot, 5, j+1);
                Sum = 0;
                Sum1 = 0;
                Tot = 0;

            }

            for(int j=0;j<col;j++){

                IIAT1=(long) model10.getValueAt(3, j+1);
                UPR=(long) model3.getValueAt(4, j+1);
                Tarifa=(float)IIAT1/UPR;
                IFD=(long) model3.getValueAt(1, j+1);
                Final=(long) (Tarifa*IFD);

                model10.setValueAt(Final, 6, j+1);

                IIAT = 0;
                IIAT1=0;
                UPR=0;
                Tarifa=0;
                IFD=0;
                Final=0;

            }

            long V1 = 0;
            long V2 = 0;
            long CAV = 0;

            for(int j=0;j<col;j++){

                V1=(long) model10.getValueAt(5, j+1);
                V2=(long) model10.getValueAt(6, j+1);
                CAV = V1-V2;

                model10.setValueAt(CAV,7 , j+1);

                V1=0;
                V2=0;
                CAV=0;

            }

            jTable10.setModel(model10);

        }

        long Total=0;
           for(int j=0; j<8;j++){
        for(int i=0;i<col;i++){
       
            Total=Total+(long)model10.getValueAt(j, i+1);
          
        }
        
        
        model10.setValueAt(Total, j, col+1);
        Total=0;
        
           }
            }catch(NullPointerException ex){

            JOptionPane.showMessageDialog(this,
                "Complete Todos Los Datos de La Tabla de Presupuesto Costo de Artículos Vendidos",
                "Introducir Todos Los Datos",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btncalcular5ActionPerformed

    private void txtSalariosVKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSalariosVKeyTyped
char c = evt.getKeyChar();

        double x=0;
        
        
        if(txtSalariosV.getCaretPosition()==0&&!Character.isISOControl(c)&&!Character.isDigit(c)){
            
             Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
            
        }
        
        
        if("0".equals(txtSalariosV.getText())&&txtSalariosV.getCaretPosition()==1&&c!='.'&&!Character.isISOControl(c)){
      txtSalariosV.setText(txtSalariosV.getText()+".");
   //   return;
}

        if (c == '.' && txtSalariosV.getText().contains(".")) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }

        String x1 = "";
         if(Character.isDigit(c)||(Character.isISOControl(c)&&!"".equals(txtSalariosV.getText()))){
            x1 = txtSalariosV.getText();
        }
        if(Character.isDigit(c)||(c == '.')){
            x1 = txtSalariosV.getText().concat(String.valueOf(c));
        }
       
        if(!"".equals(x1)){
            x = Double.parseDouble(x1);     
        }

        if ((!Character.isDigit(c)) && (!Character.isISOControl(c))
            && (c != '.')||x>99999999) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }        // TODO add your handling code here:
                // TODO add your handling code here:
    }//GEN-LAST:event_txtSalariosVKeyTyped

    private void txtComisionesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtComisionesKeyTyped
       char c = evt.getKeyChar();

        double x=0;
        
        
        if(txtComisiones.getCaretPosition()==0&&!Character.isISOControl(c)&&!Character.isDigit(c)){
            
             Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
            
        }
        
        
        if("0".equals(txtComisiones.getText())&&txtComisiones.getCaretPosition()==1&&c!='.'&&!Character.isISOControl(c)){
      txtComisiones.setText(txtComisiones.getText()+".");
   //   return;
}

        if (c == '.' && txtComisiones.getText().contains(".")) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }

        String x1 = "";
         if(Character.isDigit(c)||(Character.isISOControl(c)&&!"".equals(txtComisiones.getText()))){
            x1 = txtComisiones.getText();
        }
        if(Character.isDigit(c)||(c == '.')){
            x1 = txtComisiones.getText().concat(String.valueOf(c));
        }
       
        if(!"".equals(x1)){
            x = Double.parseDouble(x1);     
        }

        if ((!Character.isDigit(c)) && (!Character.isISOControl(c))
            && (c != '.')||x>99999999) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }        // TODO add your handling code here:
         // TODO add your handling code here:
    }//GEN-LAST:event_txtComisionesKeyTyped

    private void txtViajesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtViajesKeyTyped
        char c = evt.getKeyChar();

        double x=0;
        
        
        if(txtViajes.getCaretPosition()==0&&!Character.isISOControl(c)&&!Character.isDigit(c)){
            
             Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
            
        }
        
        
        if("0".equals(txtViajes.getText())&&txtViajes.getCaretPosition()==1&&c!='.'&&!Character.isISOControl(c)){
      txtViajes.setText(txtViajes.getText()+".");
   //   return;
}

        if (c == '.' && txtViajes.getText().contains(".")) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }

        String x1 = "";
         if(Character.isDigit(c)||(Character.isISOControl(c)&&!"".equals(txtViajes.getText()))){
            x1 = txtViajes.getText();
        }
        if(Character.isDigit(c)||(c == '.')){
            x1 = txtViajes.getText().concat(String.valueOf(c));
        }
       
        if(!"".equals(x1)){
            x = Double.parseDouble(x1);     
        }

        if ((!Character.isDigit(c)) && (!Character.isISOControl(c))
            && (c != '.')||x>99999999) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }        // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_txtViajesKeyTyped

    private void txtPublicidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPublicidadKeyTyped
        char c = evt.getKeyChar();

        double x=0;
        
        
        if(txtPublicidad.getCaretPosition()==0&&!Character.isISOControl(c)&&!Character.isDigit(c)){
            
             Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
            
        }
        
        
        if("0".equals(txtPublicidad.getText())&&txtPublicidad.getCaretPosition()==1&&c!='.'&&!Character.isISOControl(c)){
      txtPublicidad.setText(txtPublicidad.getText()+".");
   //   return;
}

        if (c == '.' && txtPublicidad.getText().contains(".")) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }

        String x1 = "";
         if(Character.isDigit(c)||(Character.isISOControl(c)&&!"".equals(txtPublicidad.getText()))){
            x1 = txtPublicidad.getText();
        }
        if(Character.isDigit(c)||(c == '.')){
            x1 = txtPublicidad.getText().concat(String.valueOf(c));
        }
       
        if(!"".equals(x1)){
            x = Double.parseDouble(x1);     
        }

        if ((!Character.isDigit(c)) && (!Character.isISOControl(c))
            && (c != '.')||x>99999999) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }        // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPublicidadKeyTyped

    private void txtCuentasIncoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCuentasIncoKeyTyped
        char c = evt.getKeyChar();

        double x=0;
        
        
        if(txtCuentasInco.getCaretPosition()==0&&!Character.isISOControl(c)&&!Character.isDigit(c)){
            
             Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
            
        }
        
        
        if("0".equals(txtCuentasInco.getText())&&txtCuentasInco.getCaretPosition()==1&&c!='.'&&!Character.isISOControl(c)){
      txtCuentasInco.setText(txtCuentasInco.getText()+".");
   //   return;
}

        if (c == '.' && txtCuentasInco.getText().contains(".")) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }

        String x1 = "";
         if(Character.isDigit(c)||(Character.isISOControl(c)&&!"".equals(txtCuentasInco.getText()))){
            x1 = txtCuentasInco.getText();
        }
        if(Character.isDigit(c)||(c == '.')){
            x1 = txtCuentasInco.getText().concat(String.valueOf(c));
        }
       
        if(!"".equals(x1)){
            x = Double.parseDouble(x1);     
        }

        if ((!Character.isDigit(c)) && (!Character.isISOControl(c))
            && (c != '.')||x>99999999) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }        // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCuentasIncoKeyTyped

    private void btncalcular3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncalcular3ActionPerformed
        int col=0;

        if(rd3.isSelected()){
            col=3;
        }

        if(rd6.isSelected()){
            col=6;
        }

        if(rd12.isSelected()){
            col=12;
        }
        
        try{
        long [] ventas = new long[col];

        for(int i = 0 ; i<col;i++){
            ventas[i]= (long) model2.getValueAt(model2.getRowCount()-1, i+1);

        }
        double Comisiones=0, Viajes=0, Publicidad=0, CuentasIncobrables=0, Salarios=0;

        if(
            "".equals(txtComisiones.getText())||
            "".equals(txtViajes.getText()) ||
            "".equals(txtPublicidad.getText())||
            "".equals(txtCuentasInco.getText())||
            "".equals(txtSalariosV.getText())

        ) {

            JOptionPane.showMessageDialog(this, "Introduzca Todos Los Datos", "Introduzca Todos Los Datos", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Comisiones=Double.parseDouble(txtComisiones.getText().trim())/100;
        Viajes=Double.parseDouble(txtViajes.getText().trim())/100;
        Publicidad=Double.parseDouble(txtPublicidad.getText().trim())/100;
        CuentasIncobrables=Double.parseDouble(txtCuentasInco.getText().trim())/100;
        Salarios=Double.parseDouble(txtSalariosV.getText().trim());

        long total=0;
        long [] TGDV = new long[col];
        long [] CI = new long[col];

        String [][] Datos= new String [(col*10)][4];
        String header7 [] = {"Tipo de Gasto","Fijos","Variables","TOTAL"};
        model11.setColumnIdentifiers(header7);
        int i=0;

        for(int k=0;k<col;k++){

            Datos[i][0]="MES #"+(k+1)+" "+ventas[k]+" En Ventas";
            Datos[i][1]="-";
            Datos[i][2]="-";
            Datos[i][3]="-";

            i=i+1;
            Datos[i][0]="-";
            Datos[i][1]="-";
            Datos[i][2]="-";
            Datos[i][3]="-";

            i=i+1;
            Datos[i][0]="Salarios";
            Datos[i][1]=String.valueOf(Salarios);
            Datos[i][2]="-";
            Datos[i][3]=String.valueOf(Salarios);

            i=i+1;
            Datos[i][0]="Comisiones";
            Datos[i][1]="-";
            Datos[i][2]=String.valueOf(Comisiones*(ventas[k]));
            Datos[i][3]=String.valueOf(Comisiones*(ventas[k]));

            i=i+1;
            Datos[i][0]="Viajes";
            Datos[i][1]="-";
            Datos[i][2]=String.valueOf(Viajes*(ventas[k]));
            Datos[i][3]=String.valueOf(Viajes*(ventas[k]));

            i=i+1;
            Datos[i][0]="Publicidad";
            Datos[i][1]="-";
            Datos[i][2]=String.valueOf(Publicidad*(ventas[k]));
            Datos[i][3]=String.valueOf(Publicidad*(ventas[k]));

            i=i+1;
            Datos[i][0]="Cuentas Incobrables";
            Datos[i][1]="-";
            Datos[i][2]=String.valueOf(CuentasIncobrables*(ventas[k]));
            Datos[i][3]=String.valueOf(CuentasIncobrables*(ventas[k]));
            CI[k]=(long) (CuentasIncobrables*(ventas[k]));

            i=i+1;
            Datos[i][0]="       Total de Gastos de Ventas";
            Datos[i][1]=String.valueOf(Salarios);
            total=0;
            total=(long) ((Comisiones*(ventas[k]))+(Viajes*(ventas[k]))+(Publicidad*(ventas[k]))+(CuentasIncobrables*(ventas[k])));
            Datos[i][2]=String.valueOf(total);
            total=0;
            total=(long) ((Comisiones*(ventas[k]))+(Viajes*(ventas[k]))+(Publicidad*(ventas[k]))+(CuentasIncobrables*(ventas[k]))+Salarios);
            Datos[i][3]=String.valueOf(total);

            TGDV[k]=total;
            total=0;
            i=i+1;

            Datos[i][0]=" ";
            Datos[i][1]=" ";
            Datos[i][2]=" ";
            Datos[i][3]=" ";

            i=i+1;
            Datos[i][0]="==========";
            Datos[i][1]="==========";
            Datos[i][2]="==========";
            Datos[i][3]="==========";

        }

        model11.setDataVector(Datos, header7);

        jTable11.setModel(model11);
        
        for(int j=0;j<col;j++){
            
            model13.setValueAt(TGDV[j], 4, j+1);
            
        }
      
        long GV=0;
        for(int j=0;j<col;j++){
        
            GV=TGDV[j]-CI[j];
            model14.setValueAt(GV, 8, j+1);
            GV=0;
        }

         }catch(NullPointerException ex){

            JOptionPane.showMessageDialog(this,
                "Complete Todos Los Datos de La Tabla de Presupuesto de Gastos de Ventas",
                "Introducir Todos Los Datos",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btncalcular3ActionPerformed

    private void txtIRKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIRKeyTyped
 char c = evt.getKeyChar();

        double x=0;
        
        
        if(txtIR.getCaretPosition()==0&&!Character.isISOControl(c)&&!Character.isDigit(c)){
            
             Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
            
        }
        
        
        if("0".equals(txtIR.getText())&&txtIR.getCaretPosition()==1&&c!='.'&&!Character.isISOControl(c)){
      txtIR.setText(txtIR.getText()+".");
   //   return;
}

        if (c == '.' && txtIR.getText().contains(".")) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }

        String x1 = "";
         if(Character.isDigit(c)||(Character.isISOControl(c)&&!"".equals(txtIR.getText()))){
            x1 = txtIR.getText();
        }
        if(Character.isDigit(c)||(c == '.')){
            x1 = txtIR.getText().concat(String.valueOf(c));
        }
       
        if(!"".equals(x1)){
            x = Double.parseDouble(x1);     
        }

        if ((!Character.isDigit(c)) && (!Character.isISOControl(c))
            && (c != '.')||x>99999999) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }              // TODO add your handling code here:
    }//GEN-LAST:event_txtIRKeyTyped

    private void btncalcular7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncalcular7ActionPerformed
        int col=0;

        if(rd3.isSelected()){
            col=3;
        }

        if(rd6.isSelected()){
            col=6;
        }

        if(rd12.isSelected()){
            col=12;
        }
        try{
            
            if("".equals(txtIR.getText())){
                JOptionPane.showMessageDialog(this, "Introduzca Todos Los Datos", "Introduzca Todos Los Datos", JOptionPane.ERROR_MESSAGE);
           return;
       }
              if(!"".equals(txtIR.getText())){
             
       
            double IR=Double.parseDouble(txtIR.getText().trim())/100;

            long IRI=0;
            for(int i=0; i<col;i++){
                
             IRI=(long) ((long) model13.getValueAt(7, i+1)*IR);
             model13.setValueAt(IRI, 8, i+1);
               IRI=0; 
            }
            
            long UTINETA=0;
             for(int i=0; i<col;i++){
                
             UTINETA=(long) model13.getValueAt(7, i+1)-(long)model13.getValueAt(8, i+1);
             model13.setValueAt(UTINETA, 9, i+1);
               UTINETA=0; 
            }
        
             double Depref=0;
       
        
        
        Depref=Double.parseDouble(txtDepre.getText().trim()); 
       
        
        long Ventas=0, MD=0, MOD=0, CIF=0,GA=0,IR1=0;
        
        for(int i=0;i<col;i++){
           Ventas=(long) model13.getValueAt(0 , i+1);
           MD=(long) model4.getValueAt(model4.getRowCount()-1 , i+1);
           MOD=(long) model7.getValueAt(model7.getRowCount()-1 , i+1);
           CIF=(long) ((long) model10.getValueAt(2 , i+1)-Depref);
           GA=(long) model13.getValueAt(5 , i+1);
           IR1=(long) model13.getValueAt(8 , i+1);
           
           model14.setValueAt(Ventas, 2, i+1);
           model14.setValueAt(MD, 5, i+1);
           model14.setValueAt(MOD, 6, i+1);
           model14.setValueAt(CIF, 7, i+1);
           model14.setValueAt(GA, 9, i+1);
           model14.setValueAt(IR1, 10, i+1);
           
            Ventas=0;
           MD=0;
           MOD=0;
           CIF=0;
           GA=0;
           IR1=0;
           
           
           
        }
           long Total=0;
           for(int j=0; j<10;j++){
        for(int i=0;i<col;i++){
        
            if(j==3){
                
            }
            else{
            Total=Total+(long)model13.getValueAt(j, i+1);
            }
        }
         if(j==3){
                
            }
         else{
        model13.setValueAt(Total, j, col+1);
        Total=0;
         }
           }
              }
            }catch(NullPointerException ex){

            JOptionPane.showMessageDialog(this,
                "Complete Todos Los Datos de La Tabla de Estado de Ingreso Presupuestado",
                "Introducir Todos Los Datos",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btncalcular7ActionPerformed

    private void btncalcular6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncalcular6ActionPerformed
  int col=0;

        if(rd3.isSelected()){
            col=3;
        }

        if(rd6.isSelected()){
            col=6;
        }

        if(rd12.isSelected()){
            col=12;
        }
        try{
        long total=0;
        
        for(int i=0;i<4;i++){
            
            total=total+(long)model12.getValueAt(i, 1);
        }
        
        model12.setValueAt(total, 4, 1);
        
        
         long [] ventas = new long[col];
        long [] CAV = new long[col];
        long [] GV = new long[col];
        long GA = 0;
        long UtiBru=0;
        
   
        
        for(int i = 0 ; i<col;i++){
            ventas[i]= (long) model2.getValueAt(model2.getRowCount()-1, i+1);
            CAV[i]= (long) model10.getValueAt(model10.getRowCount()-1, i+1);

        }
        
      

        GA= (long) model12.getValueAt(model12.getRowCount()-1, 1);
        
        for(int i = 0 ; i<col;i++){
            
        model13.setValueAt(ventas[i], 0, i+1);   
        model13.setValueAt(CAV[i], 1, i+1);
        model13.setValueAt(GA, 5, i+1);

        }
         for(int i = 0 ; i<col;i++){
            UtiBru=(long)model13.getValueAt(0, i+1)-(long)model13.getValueAt(1, i+1);
            model13.setValueAt(UtiBru, 2, i+1);
            UtiBru=0;
        }
         
          for(int i = 0 ; i<col;i++){
         
            model13.setValueAt(" ", 3, i+1);
            
        }
          
          long TotalGOpe=0;
            for(int i = 0 ; i<col;i++){
            TotalGOpe=(long)model13.getValueAt(4, i+1)+(long)model13.getValueAt(5, i+1);
            model13.setValueAt(TotalGOpe, 6, i+1);
            TotalGOpe=0;
        } 
            
             long UAI=0;
            for(int i = 0 ; i<col;i++){
            UAI=(long)model13.getValueAt(2, i+1)-(long)model13.getValueAt(6, i+1);
            model13.setValueAt(UAI, 7, i+1);
            UAI=0;
        } 
         
        }catch(NullPointerException ex){

            JOptionPane.showMessageDialog(this,
                "Complete Todos Los Datos de La Tabla de Presupuesto de Gastos Administrativos",
                "Introducir Todos Los Datos",
                JOptionPane.ERROR_MESSAGE);
            return;
        }  
         
        // TODO add your handling code here:
    }//GEN-LAST:event_btncalcular6ActionPerformed

    private void txtSaldoIKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSaldoIKeyTyped
 char c = evt.getKeyChar();

        double x=0;
        
        
        if(txtSaldoI.getCaretPosition()==0&&!Character.isISOControl(c)&&!Character.isDigit(c)){
            
             Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
            
        }
        
        
        if("0".equals(txtSaldoI.getText())&&txtSaldoI.getCaretPosition()==1&&c!='.'&&!Character.isISOControl(c)){
      txtSaldoI.setText(txtSaldoI.getText()+".");
   //   return;
}

        if (c == '.' && txtSaldoI.getText().contains(".")) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }

        String x1 = "";
         if(Character.isDigit(c)||(Character.isISOControl(c)&&!"".equals(txtSaldoI.getText()))){
            x1 = txtSaldoI.getText();
        }
        if(Character.isDigit(c)||(c == '.')){
            x1 = txtSaldoI.getText().concat(String.valueOf(c));
        }
       
        if(!"".equals(x1)){
            x = Double.parseDouble(x1);     
        }

        if ((!Character.isDigit(c)) && (!Character.isISOControl(c))
            && (c != '.')||x>99999999) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }        // TODO add your handling code here:
    }//GEN-LAST:event_txtSaldoIKeyTyped

    private void btncalcular8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncalcular8ActionPerformed

        
        
         int col=0;

        if(rd3.isSelected()){
            col=3;
        }

        if(rd6.isSelected()){
            col=6;
        }

        if(rd12.isSelected()){
            col=12;
        }
        
         long SaldoI=0;
         try{
             
             if("".equals(txtSaldoI.getText())){
                      JOptionPane.showMessageDialog(this, "Introduzca Todos Los Datos", "Introduzca Todos Los Datos", JOptionPane.ERROR_MESSAGE);
           return;
       } 
           
              if(!"".equals(txtSaldoI.getText())){
      
       
        SaldoI=Long.parseLong(txtSaldoI.getText().trim());
        
        model14.setValueAt(SaldoI, 0, 1);
        
        long Disponible=0, Desembolso=0, SuperDef=0;
        
        for(int i=0;i<col;i++){
            
      Disponible=(long)model14.getValueAt(0, i+1)+(long)model14.getValueAt(2, i+1);
      model14.setValueAt(Disponible, 3, i+1);
      Desembolso=(long)model14.getValueAt(5, i+1)+
              (long)model14.getValueAt(6, i+1)+
              (long)model14.getValueAt(7, i+1)+
              (long)model14.getValueAt(8, i+1)+
              (long)model14.getValueAt(9, i+1)+
              (long)model14.getValueAt(10, i+1);
      
        model14.setValueAt(Desembolso, 11, i+1);    
        
        SuperDef=Disponible-Desembolso;
        model14.setValueAt(SuperDef, 12, i+1);   
       
        if(i!=col-1){
        model14.setValueAt(SuperDef, 0, i+2);
        }  
        if(i==col-1){
        model14.setValueAt(SuperDef, 12, i+2);
        } 
        
        Desembolso=0;
        Disponible=0;
        SuperDef=0;
            
        }
        
        long Total=0;
           for(int j=0; j<12;j++){
        for(int i=0;i<col;i++){
        if(j==1||j==4){
            
        }
        else{
            Total=Total+(long)model14.getValueAt(j, i+1);
        }   
        }
        if(j==1||j==4){
            
        }
        else{
        model14.setValueAt(Total, j, col+1);
        Total=0;
        }
           }
           
                
try {
            tablaspdf();

      // TODO add your handling code here:
        } catch (DocumentException ex) {
       JOptionPane.showMessageDialog(this,
                "Error al Crear PDF",
                "Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        } catch (FileNotFoundException ex) {
           JOptionPane.showMessageDialog(this,
                "Archivo PDF No Encontrado",
                "Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
              }
 }catch(NullPointerException ex){

            JOptionPane.showMessageDialog(this,
                "Complete Todos Los Datos de La Tabla de Presupuesto de Caja",
                "Introducir Todos Los Datos",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btncalcular8ActionPerformed
   
    
      
    DefaultTableModel model = new DefaultTableModel() {

    
     @Override
   public Class getColumnClass(int columna)
   {
    if (columna == 0) return String.class;
    else{
//      if (columna == 1) return Integer.class;
      return Long.class;
    }
   }
     
      @Override
    public boolean isCellEditable(int row, int column) {
       //all cells false
          
          if(column==columna){
              return false;
          }
          if(column==0){
              return false;
          }
          if(row==fila){
             return false;
          }
          else{
       return true;
          }
    }
    
};

      DefaultTableModel model3 = new DefaultTableModel() {

    
     @Override
   public Class getColumnClass(int columna)
   {
    if (columna == 0) return String.class;
    else{
//      if (columna == 1) return Integer.class;
      return Long.class;
    }
   }
     
      @Override
    public boolean isCellEditable(int row, int column) {
       //all cells false
          
          if(row==3&&column==1){
              return true;
          }
          
          if(column==columna){
              return false;
          }
          if(column==0){
              return false;
          }
          if(row==4){
             return false;
          }
          if(row==2){
             return false;
          }
          if(row==0){
              return false;
          }
           if(row==3){
              return false;
          }
          else{
       return true;
          }
    }
      
      
      
    
};
      
        DefaultTableModel model4 = new DefaultTableModel() {

    
     @Override
   public Class getColumnClass(int columna)
   {
    if (columna == 0) return String.class;
    else{
//      if (columna == 1) return Integer.class;
      return Long.class;
    }
   }
     
      @Override
    public boolean isCellEditable(int row, int column) {
       //all cells false
          
//          if(column==columna){
//              return false;
//          }
//          if(column==0){
//              return false;
//          }
//          if(row==4){
//             return false;
//          }
//          if(row==2){
//             return false;
//          }
//          if(row==0){
//              return false;
//          }
//          else{
       return true;
//          }
    }
      
      
      
    
};
        
          DefaultTableModel model8 = new DefaultTableModel() {

    
     @Override
   public Class getColumnClass(int columna)
   {
    if (columna == 0) return String.class;
    else{
//      if (columna == 1) return Integer.class;
      return Long.class;
    }
   }
     
      @Override
    public boolean isCellEditable(int row, int column) {
       //all cells false
          
//          if(column==columna){
//              return false;
//          }
//          if(column==0){
//              return false;
//          }
//          if(row==4){
//             return false;
//          }
//          if(row==2){
//             return false;
//          }
//          if(row==0){
//              return false;
//          }
//          else{
       return false;
//          }
    }
      
      
      
    
};
          
           
          DefaultTableModel model9 = new DefaultTableModel() {

    
     @Override
   public Class getColumnClass(int columna)
   {
    if (columna == 0) return String.class;
    else{
//      if (columna == 1) return Integer.class;
      return String.class;
    }
   }
     
      @Override
    public boolean isCellEditable(int row, int column) {
       //all cells false
          
//          if(column==columna){
//              return false;
//          }
//          if(column==0){
//              return false;
//          }
//          if(row==4){
//             return false;
//          }
//          if(row==2){
//             return false;
//          }
//          if(row==0){
//              return false;
//          }
//          else{
       return false;
//          }
    }
      
      
      
    
};
          
           DefaultTableModel model10 = new DefaultTableModel() {

    
     @Override
   public Class getColumnClass(int columna)
   {
    if (columna == 0) return String.class;
    else{
//      if (columna == 1) return Integer.class;
      return Long.class;
    }
   }
     
      @Override
    public boolean isCellEditable(int row, int column) {
       //all cells false
          
//          if(column==columna){
//              return false;
//          }
//          if(column==0){
//              return false;
//          }
//          if(row==4){
//             return false;
//          }
//          if(row==2){
//             return false;
//          }
//          if(row==0){
//              return false;
//          }
//          else{
       return false;
//          }
    }
      
      
      
    
};
           
            DefaultTableModel model11 = new DefaultTableModel() {

    
     @Override
   public Class getColumnClass(int columna)
   {
    if (columna == 0) return String.class;
    else{
//      if (columna == 1) return Integer.class;
      return String.class;
    }
   }
     
      @Override
    public boolean isCellEditable(int row, int column) {
       //all cells false
          
//          if(column==columna){
//              return false;
//          }
//          if(column==0){
//              return false;
//          }
//          if(row==4){
//             return false;
//          }
//          if(row==2){
//             return false;
//          }
//          if(row==0){
//              return false;
//          }
//          else{
       return false;
//          }
    }
      
      
      
    
};
            
               DefaultTableModel model12 = new DefaultTableModel() {

    
     @Override
   public Class getColumnClass(int columna)
   {
    if (columna == 0) return String.class;
    else{
//      if (columna == 1) return Integer.class;
      return Long.class;
    }
   }
     
      @Override
    public boolean isCellEditable(int row, int column) {
       //all cells false
          
//          if(column==columna){
//              return false;
//          }
         if(column==0){
              return false;
          }
          if(row==4){
             return false;
          }
//          if(row==2){
//             return false;
//          }
//          if(row==0){
//              return false;
//          }
         else{
       return true;
          }
    }
      
      
      
    
};
               
                 DefaultTableModel model13 = new DefaultTableModel() {

    
     @Override
   public Class getColumnClass(int columna)
   {
    if (columna == 0) return String.class;
    else{
//      if (columna == 1) return Integer.class;
      return Long.class;
    }
   }
     
      @Override
    public boolean isCellEditable(int row, int column) {
       //all cells false
          
//          if(column==columna){
//              return false;
//          }
//         if(column==0){
//              return false;
//          }
//          if(row==4){
//             return false;
//          }
//          if(row==2){
//             return false;
//          }
//          if(row==0){
//              return false;
//          }
//         else{
       return false;
//          }
    }
      
      
      
    
};
   
                 
                     
                 DefaultTableModel model14 = new DefaultTableModel() {

    
     @Override
   public Class getColumnClass(int columna)
   {
    if (columna == 0) return String.class;
    else{
//      if (columna == 1) return Integer.class;
      return Long.class;
    }
   }
     
      @Override
    public boolean isCellEditable(int row, int column) {
       //all cells false
          
//          if(column==columna){
//              return false;
//          }
//         if(column==0){
//              return false;
//          }
//          if(row==4){
//             return false;
//          }
//          if(row==2){
//             return false;
//          }
//          if(row==0){
//              return false;
//          }
//         else{
       return false;
//          }
    }
      
      
      
    
};
         DefaultTableModel model5 = new DefaultTableModel() {

    
     @Override
   public Class getColumnClass(int columna)
   {
    if (columna == 0) return String.class;
    
    else{
//      if (columna == 1) return Integer.class;
      return Long.class;
    }
   }
     
      @Override
    public boolean isCellEditable(int row, int column) {
       //all cells false
          
//          if(column==columna){
//              return false;
//          }
//          if(column==0){
//              return false;
//          }
//          if(row==3){
//             return false;
//          }
//          if(row==2){
//             return false;
//          }
//          if(row==0){
//              return false;
//          }
//          else{
       return false;
//          }
    }
      
      
      
    
};
         
          DefaultTableModel model6 = new DefaultTableModel() {

    
     @Override
   public Class getColumnClass(int columna)
   {
    if (columna == 0) return String.class;
    else{
//      if (columna == 1) return Integer.class;
      return Double.class;
    }
   }
     
      @Override
    public boolean isCellEditable(int row, int column) {
       //all cells false
          
         if(column==0){
    return false;
         }
//          if(column==0){
//              return false;
//          }
//          if(row==4){
//             return false;
//          }
//          if(row==2){
//             return false;
//          }
//          if(row==0){
//              return false;
//          }
//          else{
       return true;
//          }
    }
      
      
      
    
};
          
             DefaultTableModel model7 = new DefaultTableModel() {

    
     @Override
   public Class getColumnClass(int columna)
   {
    if (columna == 0){
        return String.class;
    }
   
    
    else{
//      if (columna == 1) return Integer.class;
      return Long.class;
    }
   }
        
      @Override
    public boolean isCellEditable(int row, int column) {
       //all cells false
          
        
//          if(column==0){
//              return false;
//          }
//          if(row==4){
//             return false;
//          }
//          if(row==2){
//             return false;
//          }
//          if(row==0){
//              return false;
//          }
//          else{
       return false;
//          }
    }
        
    
};

    DefaultTableModel model2 = new DefaultTableModel() {

    @Override
    public boolean isCellEditable(int row, int column) {
       //all cells false
       return false;
    }
};


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Panel1;
    private org.edisoncor.gui.tabbedPane.TabbedPaneHeader TabbedPane;
    private javax.swing.JButton btnCalcular3;
    private javax.swing.JButton btnaceptar;
    private javax.swing.JButton btncalcular;
    private javax.swing.JButton btncalcular1;
    private javax.swing.JButton btncalcular2;
    private javax.swing.JButton btncalcular3;
    private javax.swing.JButton btncalcular4;
    private javax.swing.JButton btncalcular5;
    private javax.swing.JButton btncalcular6;
    private javax.swing.JButton btncalcular7;
    private javax.swing.JButton btncalcular8;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel40;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel43;
    private javax.swing.JPanel jPanel44;
    private javax.swing.JPanel jPanel45;
    private javax.swing.JPanel jPanel46;
    private javax.swing.JPanel jPanel47;
    private javax.swing.JPanel jPanel48;
    private javax.swing.JPanel jPanel49;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel50;
    private javax.swing.JPanel jPanel51;
    private javax.swing.JPanel jPanel52;
    private javax.swing.JPanel jPanel54;
    private javax.swing.JPanel jPanel55;
    private javax.swing.JPanel jPanel56;
    private javax.swing.JPanel jPanel57;
    private javax.swing.JPanel jPanel58;
    private javax.swing.JPanel jPanel59;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel60;
    private javax.swing.JPanel jPanel61;
    private javax.swing.JPanel jPanel62;
    private javax.swing.JPanel jPanel63;
    private javax.swing.JPanel jPanel64;
    private javax.swing.JPanel jPanel65;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable10;
    private javax.swing.JTable jTable11;
    private javax.swing.JTable jTable12;
    private javax.swing.JTable jTable13;
    private javax.swing.JTable jTable14;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTable jTable6;
    private javax.swing.JTable jTable7;
    private javax.swing.JTable jTable8;
    private javax.swing.JTable jTable9;
    private javax.swing.JRadioButton rd12;
    private javax.swing.JRadioButton rd3;
    private javax.swing.JRadioButton rd6;
    private javax.swing.JTextField txtCalef;
    private javax.swing.JTextField txtCantMD;
    private javax.swing.JTextField txtComisiones;
    private javax.swing.JTextField txtCuentasInco;
    private javax.swing.JTextField txtDepre;
    private javax.swing.JTextField txtEnergi;
    private javax.swing.JTextField txtIIAT;
    private javax.swing.JTextField txtIR;
    private javax.swing.JTextField txtISN;
    private javax.swing.JTextField txtImpuFija;
    private javax.swing.JTextField txtLuzFijo;
    private javax.swing.JTextField txtMIFijos;
    private javax.swing.JTextField txtMOD;
    private javax.swing.JTextField txtMODFija;
    private javax.swing.JTextField txtMant;
    private javax.swing.JTextField txtMantFijo;
    private javax.swing.JTextField txtPPU;
    private javax.swing.JTextField txtPorcProd;
    private javax.swing.JTextField txtProdSig;
    private javax.swing.JTextField txtPublicidad;
    private javax.swing.JTextField txtSalariosV;
    private javax.swing.JTextField txtSaldoI;
    private javax.swing.JTextField txtSeguros;
    private javax.swing.JTextField txtSupervisionFijo;
    private javax.swing.JTextField txtVarios;
    private javax.swing.JTextField txtViajes;
    private javax.swing.JTextField txtenergFija;
    private javax.swing.JTextField txtpu;
    private javax.swing.JTextField txtterri;
    // End of variables declaration//GEN-END:variables
}
